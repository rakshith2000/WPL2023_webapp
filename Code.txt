import ttkbootstrap as ttkb
from ttkbootstrap.constants import *
from ttkbootstrap.style import Style
from ttkbootstrap.scrolled import ScrolledFrame
import tkinter as tk  # Needed for tk.Menu
import psutil, wmi, socket, platform, subprocess, paramiko, re
from datetime import datetime
import threading
from queue import Queue

class SystemHealthCheckDashboard(ttkb.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.pack(fill="both", expand=True)
        user1 = "kosv1106" #Windows 6 servers
        password1 = "c3RM21nvPx2&%32fsp93v"
        
        user2 = "kosv1388" #Linux servers
        password2 = "M7!k28p&c30tyBt1"
        
        self.server_credentials = {
            "USWIW1489" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW1490" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW1492" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW1530" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW1531" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW1533" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW714" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW715" : {"type": "Windows", "user": user1, "password": password1},
            "USWIW716" : {"type": "Windows", "user": user1, "password": password1},
            "USWIX733" : {"type": "Linux", "user": user2, "password": password2},
        }

        # Configure grid layout
        self.columnconfigure(0, weight=0)  # Left pane (fixed)
        self.columnconfigure(1, weight=1)  # Right content area (expandable)
        self.rowconfigure(0, weight=0)  # Header (fixed height)
        self.rowconfigure(1, weight=1)  # Main area (expandable)

        self.create_header()
        self.create_left_pane()
        self.create_main_area()
        
        self.current_server = None
        self.wmi_conn = None
        self.os_info = None
        self.processor_info = None
        self.disks_info = None
        self.computer_system_info = None

    def create_header(self):
        header_frame = ttkb.Frame(self, padding=10, bootstyle=PRIMARY)
        header_frame.grid(row=0, column=0, columnspan=2, sticky="nsew")

        header_lbl = ttkb.Label(
            master=header_frame,
            text="JDA Application Healthcheck Dashboard",
            bootstyle=(PRIMARY, INVERSE),
            font=("Helvetica", 18, "bold"),
            anchor='center'
        )
        header_lbl.pack(fill="x", expand=True)

    def create_left_pane(self):
        # Create custom styles
        style = ttkb.Style()
        style.configure('Overview.TButton', font=('Calibri', 14, 'bold'))
        style.configure('Get.TButton', font=('Microsoft Sans Serif', 10, 'bold'), foreground='white',
                        background='#28a745', bordercolor='#28a745', darkcolor='#28a745', lightcolor='#28a745',
                        relief='raised', anchor='center')
        style.configure('custom.TLabelframe', bordercolor='#6c757d', background=style.colors.light)
        style.configure('custom.TLabelframe.Label',
                        font=('Calibri', 14, 'bold'),
                        foreground='#343a40',
                        padding=10, background=style.colors.light)

        left_pane = ttkb.Frame(self, padding=10, bootstyle=LIGHT, width=220)
        left_pane.grid(row=1, column=0, sticky="ns")
        left_pane.grid_propagate(False)

        # Overview button
        overview_btn = ttkb.Button(
            left_pane,
            text="JDA Overview",
            bootstyle="success",
            style='Overview.TButton',
        )
        overview_btn.pack(fill="x", pady=(0, 20))

        separator = ttkb.Separator(left_pane, bootstyle=SECONDARY)
        separator.pack(fill="x", pady=(0, 20))

        # Server selection frame with custom styling
        server_frame = ttkb.LabelFrame(
            left_pane,
            text="Select Server",
            bootstyle="info",
            style='custom.TLabelframe',
            labelanchor="nw"
        )
        server_frame.pack(fill="x", pady=(0, 10))

        # Server Menubutton
        self.server_var = ttkb.StringVar(value="Select Server")
        server_menu_btn = ttkb.Menubutton(
            server_frame,
            textvariable=self.server_var,
            bootstyle="primary-outline",
            width=18
        )
        server_menu_btn.pack(fill="x", padx=5, pady=(10, 10))

        # Menu items
        menu = tk.Menu(server_menu_btn, tearoff=1)
        server_menu_btn["menu"] = menu
        menu.delete(0)
        menu.add_command(label="Windows Servers", state="disabled", font=("Calibri", 10, "bold"))
        win_servers = [server for server, details in self.server_credentials.items() if details["type"] == "Windows"]
        for server in win_servers:
            menu.add_radiobutton(label=f"    {server}", variable=self.server_var, value=server)
            
        menu.add_separator()
        
        menu.add_command(label="Linux Servers", state="disabled", font=("Calibri", 10, "bold"))
        lin_servers = [server for server, details in self.server_credentials.items() if details["type"] == "Linux"]
        for server in lin_servers:
            menu.add_radiobutton(label=f"    {server}", variable=self.server_var, value=server)

        # Get Metrics Button
        self.get_metrics_btn = ttkb.Button(
            server_frame,
            text="Get Metrics",
            bootstyle="success",
            style="Get.TButton",
            width=15
            #command=self.update_server_metrics
        )
        self.get_metrics_btn.pack(pady=(0, 10))
        
    def create_main_area(self):
        self.main_area = ttkb.Frame(self, padding=(10, 10, 10, 10))
        self.main_area.grid(row=1, column=1, sticky="nsew")
        
        self.content_frame = ScrolledFrame(self.main_area)#, relief="solid", borderwidth=1)
        self.content_frame.pack(fill="both", expand=True)
        
        loading_label = ttkb.Label(
            self.content_frame,
            text=f"Connecting to ...",
            font=("Calibri", 14, "bold"),
            bootstyle=INFO
        )
        loading_label.pack(expand=True)
        
        self.update_server_metrics
        
        
    def update_server_metrics(self):
        
        
        








if __name__ == '__main__':
    app = ttkb.Window("Health Check Dashboard", "yeti")
    #app.geometry("1100x700")
    app.state('zoomed')
    dashboard = SystemHealthCheckDashboard(app)
    app.mainloop()
	
	
	
	
	
Ping:
subprocess.run(['ping','-n','2',server], capture_output=True, text=True).returncode

rdp or ssh:
def check_rdp_connectivity(server, port=3389):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.settimeout(5)
    try:
        result = sock.connect_ex((server, port))
        if result == 0:
            return True 
        else:
            return False
        sock.close()    
    except Exception as e:
        return False
	
CPU:
	for windows:-
	conn = wmi.WMI(server, user="username", password="password")
	conn.Win32_OperatingSystem()[0].LoadPercentage

	for linux:-
	client = paramiko.SSHClient()
	client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
	client.connect(hostname=server, username="username", password="password")
	commands = """
			 free -b | awk '/Mem:/{print $2}';
			 cat /proc/uptime | awk '{print $1}';
			 top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}';
			 free -b | awk '/Mem:/{print $2, $3}';
			 df -B1 / | awk 'NR==2 {print $1,$2,$3,$6}'
			 """
	stdin, stdout, stderr = self.ssh_conn.exec_command(commands)
	output = stdout.read().decode().splitlines()
	export the cpu usage.

RAM:
	for windows:-
	use wmi and calculate usage percentage

	for linux:
	use plrevious connection and calculate RAM usage

C drive:
	for windows:
	use wmi and calculate usage percentage
	
	for linux:
	get the first disk mounted ob root like '/'
	using the same command 
	
d drive:
	for windows:
	use wmi and calculate usage percentage
