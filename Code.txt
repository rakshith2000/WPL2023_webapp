import tkinter as tk
from tkinter import ttk
import ttkbootstrap as ttkb
from ttkbootstrap.constants import *
import threading
import queue
import pythonping
import wmi
from datetime import datetime, timedelta
import socket
import math

class ServerHealthDashboard:
    def __init__(self, master):
        self.master = master
        master.title("Windows Server Health Dashboard")
        master.geometry("800x600")
        
        # Server list - replace with your actual servers
        self.servers = [
            {"name": "joedark.local", "ip": "127.0.0.1", "rdp_port": 3389, 
             "username": "admin", "password": "password"},
            {"name": "server2.example.com", "ip": "192.168.1.2", "rdp_port": 3389, 
             "username": "admin", "password": "password"},
            # Add more servers...
        ]
        
        self.current_server_data = None
        self.create_widgets()
        self.update_queue = queue.Queue()
        self.running = True
        self.start_update_thread()
        
    def create_widgets(self):
        # Main container
        main_frame = ttkb.Frame(self.master, padding=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Header
        header = ttkb.Label(
            main_frame, 
            text="Server Health Dashboard", 
            font=('Helvetica', 16, 'bold'),
            bootstyle=PRIMARY
        )
        header.pack(pady=(0, 20))
        
        # Server selection controls
        control_frame = ttkb.Frame(main_frame)
        control_frame.pack(fill=tk.X, pady=(0, 20))
        
        ttkb.Label(control_frame, text="Select Server:").pack(side=tk.LEFT, padx=5)
        
        self.server_var = tk.StringVar()
        self.server_dropdown = ttkb.Combobox(
            control_frame,
            textvariable=self.server_var,
            values=[s["name"] for s in self.servers],
            state="readonly"
        )
        self.server_dropdown.pack(side=tk.LEFT, padx=5)
        self.server_dropdown.current(0)
        
        self.get_metrics_btn = ttkb.Button(
            control_frame,
            text="Get Metrics",
            command=self.get_selected_server_metrics,
            bootstyle=SUCCESS
        )
        self.get_metrics_btn.pack(side=tk.LEFT, padx=5)
        
        # Server info display frame
        self.info_frame = ttkb.Frame(main_frame, padding=20)
        self.info_frame.pack(fill=tk.BOTH, expand=True)
        
        # Create info display labels (empty initially)
        self.create_info_labels()
        
        # Status bar
        self.status_label = ttkb.Label(
            main_frame,
            text="Select a server and click 'Get Metrics'",
            bootstyle=SECONDARY
        )
        self.status_label.pack(side=tk.BOTTOM, fill=tk.X, pady=(10, 0))
    
    def create_info_labels(self):
        # Clear existing widgets
        for widget in self.info_frame.winfo_children():
            widget.destroy()
        
        # Create a 4x2 grid for server info
        rows = [
            ["Hostname", "CPU Type"],
            ["IP Address", "CPU Clock"],
            ["Group Membership", "Operating System"],
            ["CPU Cores", "Kernel Version"],
            ["Total RAM", "Uptime"],
            ["Load", "Memory Usage", "Disk Usage"]
        ]
        
        for i, row in enumerate(rows):
            row_frame = ttkb.Frame(self.info_frame)
            row_frame.grid(row=i, column=0, sticky="ew", pady=2)
            
            for j, col in enumerate(row):
                if i < 5:  # First 5 rows have 2 columns
                    cell_frame = ttkb.Frame(row_frame)
                    cell_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
                    
                    ttkb.Label(cell_frame, text=col+":", font=('Helvetica', 9, 'bold')).pack(anchor="w")
                    label = ttkb.Label(cell_frame, text="", font=('Helvetica', 9))
                    label.pack(anchor="w")
                    setattr(self, f"info_{i}_{j}", label)
                else:  # Last row has 3 metrics
                    if j == 0:  # Load
                        cell_frame = ttkb.Frame(row_frame)
                        cell_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
                        ttkb.Label(cell_frame, text=col+":", font=('Helvetica', 9, 'bold')).pack(anchor="w")
                        label = ttkb.Label(cell_frame, text="", font=('Helvetica', 9))
                        label.pack(anchor="w")
                        setattr(self, f"info_load", label)
                    elif j == 1:  # Memory
                        cell_frame = ttkb.Frame(row_frame)
                        cell_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
                        ttkb.Label(cell_frame, text=col+":", font=('Helvetica', 9, 'bold')).pack(anchor="w")
                        label = ttkb.Label(cell_frame, text="", font=('Helvetica', 9))
                        label.pack(anchor="w")
                        setattr(self, f"info_mem", label)
                    elif j == 2:  # Disk
                        cell_frame = ttkb.Frame(row_frame)
                        cell_frame.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
                        ttkb.Label(cell_frame, text=col+":", font=('Helvetica', 9, 'bold')).pack(anchor="w")
                        label = ttkb.Label(cell_frame, text="", font=('Helvetica', 9))
                        label.pack(anchor="w")
                        setattr(self, f"info_disk", label)
    
    def get_selected_server_metrics(self):
        server_name = self.server_var.get()
        server = next((s for s in self.servers if s["name"] == server_name), None)
        
        if server:
            self.status_label.config(text=f"Fetching metrics for {server_name}...")
            threading.Thread(target=self.check_server_status, args=(server,), daemon=True).start()
    
    def check_server_status(self, server):
        result = {
            "hostname": server["name"],
            "ip_address": server["ip"],
            "group_membership": "Main Group",  # Default value
            "cpu_type": "Unknown",
            "cpu_clock": "Unknown",
            "os": "Unknown",
            "cpu_cores": "Unknown",
            "kernel_version": "Unknown",
            "total_ram": "Unknown",
            "uptime": "Unknown",
            "load": "Unknown",
            "memory_usage": "Unknown",
            "disk_usage": "Unknown"
        }
        
        try:
            # WMI connection for detailed info
            wmi_conn = wmi.WMI(
                computer=server["ip"],
                user=server["username"],
                password=server["password"]
            )
            
            # CPU Info
            cpu_info = wmi_conn.Win32_Processor()[0]
            result["cpu_type"] = cpu_info.Name
            result["cpu_clock"] = f"{float(cpu_info.MaxClockSpeed)/1000:.2f} GHz"
            result["cpu_cores"] = f"{cpu_info.NumberOfCores} physical, {cpu_info.NumberOfLogicalProcessors} virtual"
            
            # OS Info
            os_info = wmi_conn.Win32_OperatingSystem()[0]
            result["os"] = os_info.Caption
            result["kernel_version"] = os_info.Version
            result["total_ram"] = f"{int(os_info.TotalVisibleMemorySize)/1024/1024:.0f} GB"
            
            # Uptime
            last_boot = datetime.strptime(os_info.LastBootUpTime.split('.')[0], '%Y%m%d%H%M%S')
            uptime = datetime.now() - last_boot
            if uptime.days >= 30:
                result["uptime"] = f"{uptime.days//30} months"
            elif uptime.days >= 7:
                result["uptime"] = f"{uptime.days//7} weeks"
            else:
                result["uptime"] = f"{uptime.days} days"
            
            # Memory Usage
            free_ram = int(os_info.FreePhysicalMemory)
            total_ram = int(os_info.TotalVisibleMemorySize)
            used_ram = total_ram - free_ram
            result["memory_usage"] = f"{used_ram/1024/1024:.1f} GB"
            
            # CPU Load
            result["load"] = f"{cpu_info.LoadPercentage/100:.2f}"
            
            # Disk Usage
            disks = wmi_conn.Win32_LogicalDisk(DriveType=3)
            total_disk = sum(int(d.Size) for d in disks if d.Size)
            free_disk = sum(int(d.FreeSpace) for d in disks if d.FreeSpace)
            if total_disk > 0:
                disk_usage = 100 - (free_disk / total_disk * 100)
                result["disk_usage"] = f"{disk_usage:.2f}%"
            
        except Exception as e:
            print(f"Error getting metrics: {e}")
            # Use default values if WMI fails
        
        # Put result in queue for UI update
        self.update_queue.put((server, result))
    
    def start_update_thread(self):
        self.update_thread = threading.Thread(
            target=self.process_updates,
            daemon=True
        )
        self.update_thread.start()
    
    def process_updates(self):
        while self.running:
            try:
                update = self.update_queue.get(timeout=1)
                if update:
                    server, data = update
                    self.update_server_display(server, data)
            except queue.Empty:
                continue
    
    def update_server_display(self, server, data):
        # Update all the info labels
        self.info_0_0.config(text=data["hostname"])
        self.info_0_1.config(text=data["cpu_type"])
        self.info_1_0.config(text=data["ip_address"])
        self.info_1_1.config(text=data["cpu_clock"])
        self.info_2_0.config(text=data["group_membership"])
        self.info_2_1.config(text=data["os"])
        self.info_3_0.config(text=data["cpu_cores"])
        self.info_3_1.config(text=data["kernel_version"])
        self.info_4_0.config(text=data["total_ram"])
        self.info_4_1.config(text=data["uptime"])
        self.info_load.config(text=data["load"])
        self.info_mem.config(text=data["memory_usage"])
        self.info_disk.config(text=data["disk_usage"])
        
        self.status_label.config(text=f"Last updated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    def on_close(self):
        self.running = False
        self.master.destroy()

if __name__ == "__main__":
    root = ttkb.Window(themename="solar")
    app = ServerHealthDashboard(root)
    root.protocol("WM_DELETE_WINDOW", app.on_close)
    root.mainloop()
