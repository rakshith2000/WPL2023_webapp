import tkinter as tk
from tkinter import ttk
import wmi
import subprocess
import plotly.graph_objects as go

# Function to get system information using WMI
def get_system_info(remote_server, username, password):
    try:
        # Initialize WMI connection
        c = wmi.WMI(remote_server, user=username, password=password)

        # Get system info
        system_info = c.Win32_OperatingSystem()[0]
        cpu_info = c.Win32_Processor()[0]
        ip_address = subprocess.check_output("hostname -I", shell=True).decode().strip()

        total_ram = float(system_info.TotalVisibleMemorySize) / 1024 / 1024  # Convert to GB
        hostname = system_info.CSName
        os_name = system_info.Caption
        cpu_cores = c.Win32_Processor()[0].NumberOfCores

        return hostname, ip_address, cpu_info.Name, os_name, total_ram, cpu_cores
    except Exception as e:
        print(f"Error fetching system info: {e}")
        return None, None, None, None, None, None

# Function to get CPU usage and RAM usage using WMI
def get_usage(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)

        # CPU usage
        cpu_usage = c.Win32_Processor()[0].LoadPercentage

        # RAM usage
        total_memory = float(c.Win32_ComputerSystem()[0].TotalPhysicalMemory) / (1024 * 1024 * 1024)  # GB
        available_memory = float(c.Win32_OperatingSystem()[0].FreePhysicalMemory) / 1024  # MB
        ram_usage = 100 * (1 - (available_memory / total_memory))  # Calculate RAM usage percentage

        return cpu_usage, ram_usage
    except Exception as e:
        print(f"Error fetching CPU/RAM usage: {e}")
        return None, None

# Function to create gauge charts using Plotly
def create_gauge(title, value, color, max_value=100, unit="%"):
    return go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        title={"text": title},
        gauge={
            "axis": {"range": [0, max_value]},
            "bar": {"color": color},
            "steps": [
                {"range": [0, max_value * 0.6], "color": "lightgreen"},
                {"range": [max_value * 0.6, max_value * 0.85], "color": "yellow"},
                {"range": [max_value * 0.85, max_value], "color": "red"},
            ],
        }
    ))

# Function to update the dashboard UI
def update_dashboard(remote_server, username, password):
    # Fetch system information
    hostname, ip_address, cpu_info, os_name, total_ram, cpu_cores = get_system_info(remote_server, username, password)

    # Fetch CPU and RAM usage
    cpu_usage, ram_usage = get_usage(remote_server, username, password)
    
    # Fetch disk usage for C: drive (remote)
    c_usage, c_used, c_free, c_total = get_disk_usage(remote_server, username, password, "C:")

    # Clear the previous UI content
    for widget in info_frame.winfo_children():
        widget.destroy()

    # Display system information
    ttk.Label(info_frame, text="Hostname: " + hostname, font=("Arial", 12, "bold")).pack(anchor="w")
    ttk.Label(info_frame, text="IP Address: " + ip_address).pack(anchor="w")
    ttk.Label(info_frame, text="CPU: " + cpu_info).pack(anchor="w")
    ttk.Label(info_frame, text=f"Total RAM: {total_ram:.2f} GB").pack(anchor="w")
    ttk.Label(info_frame, text=f"CPU Cores: {cpu_cores}").pack(anchor="w")
    ttk.Label(info_frame, text=f"OS: {os_name}").pack(anchor="w")

    # Create Gauges for CPU, RAM, and Disk Usage
    cpu_fig = create_gauge("CPU Usage", cpu_usage, "blue")
    ram_fig = create_gauge("RAM Usage", ram_usage, "green")
    disk_fig = create_gauge("Disk Usage", c_usage if c_usage else disk_usage, "red")

    # Display Gauges
    cpu_fig.show()
    ram_fig.show()
    disk_fig.show()

# Function to get disk usage using WMI for remote server
def get_disk_usage(remote_server, username, password, drive_letter):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
                return usage_percent, used_space, free_space, total_size
    except Exception as e:
        print(f"Error fetching disk info: {e}")
        return None, None, None, None

# Create the Tkinter main window
root = tk.Tk()
root.title("Server Health Monitoring Dashboard")
root.geometry("800x500")

# Create Layout Frames
info_frame = ttk.Frame(root, padding=10)
info_frame.pack(side="left", fill="y")

gauge_frame = ttk.Frame(root, padding=10)
gauge_frame.pack(side="right", expand=True, fill="both")

# Server Dropdown List
server_list = ["192.168.1.100", "192.168.1.101", "192.168.1.102"]  # Add actual server names or IP addresses
server_var = tk.StringVar()
server_dropdown = ttk.Combobox(info_frame, textvariable=server_var, values=server_list)
server_dropdown.pack(pady=10)
server_dropdown.current(0)

# Update Button
update_button = ttk.Button(info_frame, text="Update Metrics", command=lambda: update_dashboard(server_var.get(), "admin", "password"))
update_button.pack(pady=10)

# Run the Tkinter Main Loop
root.mainloop()
