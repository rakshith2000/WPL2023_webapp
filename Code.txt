import plotly.graph_objects as go
import tkinter as tk
from tkinter import ttk
import subprocess
import wmi

# Function to check the server ping
def check_ping(remote_server):
    try:
        response = subprocess.run(['ping', '-n', '1', remote_server], stdout=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error pinging server: {e}")
        return False

# Function to check if RDP connection is available
def check_rdp(remote_server):
    try:
        response = subprocess.run(['telnet', remote_server, '3389'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking RDP: {e}")
        return False

# Function to get disk usage and total size using WMI for a remote server
def get_disk_usage(remote_server, username, password, drive_letter):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
                return usage_percent, total_size, used_space, free_space
    except Exception as e:
        print(f"Error getting disk usage: {e}")
        return 0, 0, 0, 0

# Function to get server uptime in days using WMI for a remote server
def get_uptime(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for os in c.Win32_OperatingSystem():
            last_boot = os.LastBootUpTime.split()[0]  # Parse the last boot time
            boot_time = time.strptime(last_boot, '%Y-%m-%d')  # Convert to struct_time
            uptime_seconds = time.mktime(time.gmtime()) - time.mktime(boot_time)
            uptime_days = uptime_seconds // (24 * 3600)
            return uptime_days
    except Exception as e:
        print(f"Error getting uptime: {e}")
        return 0

# Function to update server metrics
def update_metrics(remote_server, username, password):
    # Update Ping status
    ping_status = check_ping(remote_server)
    ping_label.config(text=f"Ping: {'True' if ping_status else 'False'}", fg="green" if ping_status else "red")
    
    # Update RDP connection status
    rdp_status = check_rdp(remote_server)
    rdp_label.config(text=f"RDP Connection: {'True' if rdp_status else 'False'}", fg="green" if rdp_status else "red")
    
    # Update C: and D: drive usage
    c_drive_usage, c_total_size, c_used_space, c_free_space = get_disk_usage(remote_server, username, password, 'C:')
    d_drive_usage, d_total_size, d_used_space, d_free_space = get_disk_usage(remote_server, username, password, 'D:')
    
    # Plot C: drive speedometer
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
    
    # Plot D: drive speedometer
    draw_speedometer(d_drive_usage, d_total_size, d_used_space, d_free_space, ax_d)
    
    # Update Uptime
    uptime = get_uptime(remote_server, username, password)
    uptime_label.config(text=f"Uptime: {uptime} days")

# Function to draw the speedometer using Plotly
def draw_speedometer(usage_percent, total_size, used_space, free_space, ax):
    # Define color for used space based on usage
    if usage_percent > 95:
        used_color = 'red'  # Red for high usage
    else:
        used_color = 'green'  # Green for lower usage

    # Create a gauge chart using Plotly
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=usage_percent,
        title={'text': f"Disk Usage ({usage_percent:.1f}%)"},
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge={'axis': {'range': [None, 100]},
               'bar': {'color': used_color},
               'steps': [
                   {'range': [0, 95], 'color': 'green'},
                   {'range': [95, 100], 'color': 'red'}
               ]}
    ))

    # Update the layout for the plot
    fig.update_layout(
        margin={'t': 50, 'b': 50, 'l': 50, 'r': 50},
        title=f"C: Drive Usage - {used_space:.2f} GB used",
        font={'size': 14},
    )

    # Render the figure in the Tkinter Canvas
    fig.show()

# Creating the main window
root = tk.Tk()
root.title("Server Health Check Dashboard")

# Server selection dropdown
server_list = ['192.168.1.100', '192.168.1.101', '192.168.1.102']  # Replace with actual IP addresses or hostnames of the remote servers
server_var = tk.StringVar(value=server_list[0])

dropdown_label = tk.Label(root, text="Select Server")
dropdown_label.grid(row=0, column=0, padx=10, pady=10)

server_dropdown = ttk.Combobox(root, textvariable=server_var, values=server_list)
server_dropdown.grid(row=0, column=1, padx=10, pady=10)

# Server credentials (modify these as needed)
username = "admin_user"  # Replace with the username for the remote server
password = "admin_password"  # Replace with the password for the above user

# Buttons to update metrics
update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
update_button.grid(row=1, column=0, columnspan=2, pady=20)

# Display metrics
ping_label = tk.Label(root, text="Ping: Pending", font=('Arial', 12))
ping_label.grid(row=2, column=0, columnspan=2, pady=5)

rdp_label = tk.Label(root, text="RDP Connection: Pending", font=('Arial', 12))
rdp_label.grid(row=3, column=0, columnspan=2, pady=5)

uptime_label = tk.Label(root, text="Uptime: Pending", font=('Arial', 12))
uptime_label.grid(row=4, column=0, columnspan=2, pady=5)

# Start the Tkinter event loop
root.mainloop()
