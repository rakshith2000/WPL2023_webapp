import wmi
import socket
from ping3 import ping
from ttkbootstrap import Style
import psutil
import time
from tkinter import ttk
import tkinter as tk
from speedometer import Speedometer

# Function to check Ping Status
def check_ping(server_ip):
    response = ping(server_ip)
    return response is not None

# Function to check RDP status (this is a simplified example, you might need a more complex solution for real RDP checks)
def check_rdp(server_ip):
    try:
        with socket.create_connection((server_ip, 3389), timeout=5):
            return True
    except:
        return False

# Function to fetch metrics from a remote server using WMI
def fetch_remote_metrics(server_ip, username, password):
    try:
        # Connect to the remote server via WMI
        connection = wmi.WMI(server=server_ip, user=username, password=password)

        # CPU usage
        cpu_usage = connection.query("SELECT LoadPercentage FROM Win32_Processor")[0].LoadPercentage
        
        # Memory usage
        mem_info = connection.query("SELECT TotalVisibleMemorySize, FreePhysicalMemory FROM Win32_OperatingSystem")[0]
        total_memory = mem_info.TotalVisibleMemorySize / 1024  # KB to MB
        free_memory = mem_info.FreePhysicalMemory / 1024  # KB to MB
        memory_usage = 100 - (free_memory / total_memory * 100)
        
        # Disk usage (C: drive)
        c_drive = connection.query("SELECT Size, FreeSpace FROM Win32_LogicalDisk WHERE DeviceID = 'C:'")[0]
        c_disk_usage = 100 - (c_drive.FreeSpace / c_drive.Size * 100)

        # Disk usage (D: drive)
        d_drive = connection.query("SELECT Size, FreeSpace FROM Win32_LogicalDisk WHERE DeviceID = 'D:'")[0]
        d_disk_usage = 100 - (d_drive.FreeSpace / d_drive.Size * 100)

        # Uptime (in days)
        last_boot_time = connection.query("SELECT LastBootUpTime FROM Win32_OperatingSystem")[0].LastBootUpTime
        uptime_seconds = (time.time() - last_boot_time.timestamp())  # Convert to seconds
        uptime_days = uptime_seconds // (24 * 3600)

        return cpu_usage, memory_usage, c_disk_usage, d_disk_usage, uptime_days

    except Exception as e:
        print(f"Error fetching metrics from remote server: {e}")
        return None, None, None, None, None

# Function to update server metrics
def update_metrics():
    server_ip = server_combobox.get()
    
    # Use the correct username and password to access remote servers (you should securely handle credentials)
    username = "your_admin_username"
    password = "your_admin_password"
    
    cpu_usage, memory_usage, c_disk_usage, d_disk_usage, uptime_days = fetch_remote_metrics(server_ip, username, password)

    # Update the labels with the fetched remote data
    if cpu_usage is not None:
        cpu_usage_label.config(text=f"CPU Usage: {cpu_usage}%")
        memory_usage_label.config(text=f"Memory Usage: {memory_usage}%")
        c_drive_speedometer.set_value(c_disk_usage)
        d_drive_speedometer.set_value(d_disk_usage)
        uptime_label.config(text=f"Uptime: {int(uptime_days)} days")
    else:
        # Handle error case
        cpu_usage_label.config(text="Error retrieving metrics")
        memory_usage_label.config(text="Error retrieving metrics")
        uptime_label.config(text="Error retrieving uptime")

    # Check Ping and RDP connection status
    ping_status = check_ping(server_ip)
    rdp_status = check_rdp(server_ip)

    ping_label.config(text="Ping Status: " + ("True" if ping_status else "False"), 
                      foreground="green" if ping_status else "red")
    
    rdp_label.config(text="RDP Connection: " + ("True" if rdp_status else "False"), 
                     foreground="green" if rdp_status else "red")

# GUI Setup
style = Style(theme="superhero")
root = style.master
root.title("Windows Server Health Check Dashboard")

# Left Panel: Server Dropdown
frame_left = ttk.Frame(root, width=200, padding=10)
frame_left.grid(row=0, column=0, sticky="nsew")

server_list = ["192.168.1.101", "192.168.1.102", "192.168.1.103"]  # Replace with actual server IPs
server_combobox = ttk.Combobox(frame_left, values=server_list, state="readonly")
server_combobox.grid(row=0, column=0, pady=10)
server_combobox.set(server_list[0])

# Update Button
update_button = ttk.Button(frame_left, text="Update", command=update_metrics)
update_button.grid(row=1, column=0, pady=10)

# Right Panel: Server Metrics Display
frame_right = ttk.Frame(root, padding=10)
frame_right.grid(row=0, column=1, sticky="nsew")

ping_label = ttk.Label(frame_right, text="Ping Status: ", font=("Arial", 12))
ping_label.grid(row=0, column=0, sticky="w")

rdp_label = ttk.Label(frame_right, text="RDP Connection: ", font=("Arial", 12))
rdp_label.grid(row=1, column=0, sticky="w")

cpu_usage_label = ttk.Label(frame_right, text="CPU Usage: ", font=("Arial", 12))
cpu_usage_label.grid(row=2, column=0, sticky="w")

memory_usage_label = ttk.Label(frame_right, text="Memory Usage: ", font=("Arial", 12))
memory_usage_label.grid(row=3, column=0, sticky="w")

uptime_label = ttk.Label(frame_right, text="Uptime: ", font=("Arial", 12))
uptime_label.grid(row=4, column=0, sticky="w")

sys_info_label = ttk.Label(frame_right, text="System Info", font=("Arial", 12))
sys_info_label.grid(row=5, column=0, sticky="w")

# Speedometers for C: and D: drives
c_drive_speedometer = Speedometer(frame_right, width=150, height=150)
c_drive_speedometer.grid(row=6, column=0, padx=20)
d_drive_speedometer = Speedometer(frame_right, width=150, height=150)
d_drive_speedometer.grid(row=6, column=1, padx=20)

# Run the GUI loop
root.mainloop()
