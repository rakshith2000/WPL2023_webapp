import tkinter as tk
from ttkbootstrap import Style
from tkinter import ttk
import psutil
from ping3 import ping
import time
from speedometer import Speedometer

# Function to check Ping Status
def check_ping(server_ip):
    response = ping(server_ip)
    return response is not None

# Function to check RDP status (this is a simplified example, you might need a more complex solution for real RDP checks)
def check_rdp(server_ip):
    # Assume RDP is running on port 3389
    try:
        with socket.create_connection((server_ip, 3389), timeout=5):
            return True
    except:
        return False

# Function to update server metrics
def update_metrics():
    server_ip = server_combobox.get()
    
    ping_status = check_ping(server_ip)
    rdp_status = check_rdp(server_ip)
    
    ping_label.config(text="Ping Status: " + ("True" if ping_status else "False"), 
                      foreground="green" if ping_status else "red")
    
    rdp_label.config(text="RDP Connection: " + ("True" if rdp_status else "False"), 
                     foreground="green" if rdp_status else "red")
    
    # Get CPU and memory usage
    cpu_usage = psutil.cpu_percent(interval=1)
    memory_info = psutil.virtual_memory()
    
    cpu_usage_label.config(text=f"CPU Usage: {cpu_usage}%")
    memory_usage_label.config(text=f"Memory Usage: {memory_info.percent}%")
    
    # Get disk usage (C: and D:)
    c_drive_usage = psutil.disk_usage("C:").percent
    d_drive_usage = psutil.disk_usage("D:").percent
    
    # Update speedometer views
    c_drive_speedometer.set_value(c_drive_usage)
    d_drive_speedometer.set_value(d_drive_usage)
    
    # Get uptime in days
    uptime_seconds = time.time() - psutil.boot_time()
    uptime_days = uptime_seconds // (24 * 3600)
    uptime_label.config(text=f"Uptime: {int(uptime_days)} days")
    
    # System Information (similar to image you provided)
    sys_info_label.config(text=f"System Information\nCPU: {psutil.cpu_count(logical=True)} cores\n"
                              f"RAM: {psutil.virtual_memory().total // (1024 ** 3)} GB\n"
                              f"OS: {psutil.os.name}")

# GUI Setup
style = Style(theme="superhero")
root = style.master
root.title("Windows Server Health Check Dashboard")

# Left Panel: Server Dropdown
frame_left = ttk.Frame(root, width=200, padding=10)
frame_left.grid(row=0, column=0, sticky="nsew")

server_list = ["192.168.1.101", "192.168.1.102", "192.168.1.103"]  # Replace with actual server IPs
server_combobox = ttk.Combobox(frame_left, values=server_list, state="readonly")
server_combobox.grid(row=0, column=0, pady=10)
server_combobox.set(server_list[0])

# Update Button
update_button = ttk.Button(frame_left, text="Update", command=update_metrics)
update_button.grid(row=1, column=0, pady=10)

# Right Panel: Server Metrics Display
frame_right = ttk.Frame(root, padding=10)
frame_right.grid(row=0, column=1, sticky="nsew")

ping_label = ttk.Label(frame_right, text="Ping Status: ", font=("Arial", 12))
ping_label.grid(row=0, column=0, sticky="w")

rdp_label = ttk.Label(frame_right, text="RDP Connection: ", font=("Arial", 12))
rdp_label.grid(row=1, column=0, sticky="w")

cpu_usage_label = ttk.Label(frame_right, text="CPU Usage: ", font=("Arial", 12))
cpu_usage_label.grid(row=2, column=0, sticky="w")

memory_usage_label = ttk.Label(frame_right, text="Memory Usage: ", font=("Arial", 12))
memory_usage_label.grid(row=3, column=0, sticky="w")

uptime_label = ttk.Label(frame_right, text="Uptime: ", font=("Arial", 12))
uptime_label.grid(row=4, column=0, sticky="w")

sys_info_label = ttk.Label(frame_right, text="System Info", font=("Arial", 12))
sys_info_label.grid(row=5, column=0, sticky="w")

# Speedometers for C: and D: drives
c_drive_speedometer = Speedometer(frame_right, width=150, height=150)
c_drive_speedometer.grid(row=6, column=0, padx=20)
d_drive_speedometer = Speedometer(frame_right, width=150, height=150)
d_drive_speedometer.grid(row=6, column=1, padx=20)

# Run the GUI loop
root.mainloop()
