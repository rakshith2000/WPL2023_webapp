import paramiko
import re
from datetime import datetime

def get_linux_info(host, username, password=None, key_path=None):
    # Establish SSH connection
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    try:
        if key_path:
            key = paramiko.RSAKey.from_private_key_file(key_path)
            client.connect(hostname=host, username=username, pkey=key)
        else:
            client.connect(hostname=host, username=username, password=password)
        
        # Execute commands in one session for efficiency
        commands = """
        cat /etc/os-release | grep PRETTY_NAME;
        uname -r;
        nproc;
        free -b | awk '/Mem:/{print $2}';
        uptime -s;
        top -bn1 | grep 'Cpu(s)' | awk '{print $2 + $4}';
        free -b | awk '/Mem:/{print $2, $3}';
        df -B1 --output=source,size,used | grep -v tmpfs
        """
        stdin, stdout, stderr = client.exec_command(commands)
        output = stdout.read().decode().splitlines()
        
        # Parse outputs
        os_name = output[0].split('=')[1].strip('"')
        os_build = output[1].strip()
        cpu_cores = int(output[2])
        total_ram_bytes = int(output[3])
        uptime_days = (datetime.now() - datetime.strptime(output[4], "%Y-%m-%d %H:%M:%S")).days
        cpu_usage = float(output[5])
        total_ram_gb = round(total_ram_bytes / (1024**3), 2)
        used_ram_gb = round(int(output[6].split()[1]) / (1024**3), 2)
        
        # Parse disks
        disks = []
        for line in output[7:]:
            if not line.strip(): continue
            parts = line.split()
            disks.append({
                "disk": parts[0],
                "total_gb": round(int(parts[1]) / (1024**3), 2),
                "used_gb": round(int(parts[2]) / (1024**3), 2)
            })
        
        return {
            "os_name": os_name,
            "os_build": os_build,
            "cpu_cores": cpu_cores,
            "total_ram_gb": total_ram_gb,
            "uptime_days": uptime_days,
            "cpu_usage_percent": cpu_usage,
            "ram_usage_gb": {
                "total": total_ram_gb,
                "used": used_ram_gb,
                "free": round(total_ram_gb - used_ram_gb, 2)
            },
            "disks": disks
        }
        
    finally:
        client.close()

# Usage
info = get_linux_info(
    host="192.168.1.100",
    username="admin",
    password="your_password"  # or key_path="~/.ssh/id_rsa"
)

import pprint
pprint.pprint(info)
