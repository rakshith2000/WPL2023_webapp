import winrm
from pprint import pprint

# Create session
session = winrm.Session(
    'remote-pc',  # Replace with remote computer name/IP
    auth=('username', 'password'),
    transport='ntlm'  # or 'kerberos' if in domain
)

def run_ps_command(command):
    result = session.run_ps(command)
    if result.status_code != 0:
        raise Exception(f"PS command failed: {result.std_err.decode()}")
    return result.std_out.decode().strip()

# Get OS information
os_info = run_ps_command('''
    $os = Get-CimInstance Win32_OperatingSystem
    [PSCustomObject]@{
        OSName = $os.Caption
        OSVersion = $os.Version
        BuildNumber = $os.BuildNumber
        LastBootTime = $os.LastBootUpTime
    } | ConvertTo-Json
''')

# Get CPU information
cpu_info = run_ps_command('''
    $cpu = Get-CimInstance Win32_Processor
    $cores = $cpu | Measure-Object -Property NumberOfCores -Sum | Select-Object -ExpandProperty Sum
    $threads = $cpu | Measure-Object -Property NumberOfLogicalProcessors -Sum | Select-Object -ExpandProperty Sum
    
    [PSCustomObject]@{
        CPUName = $cpu.Name[0]
        PhysicalCores = $cores
        LogicalCores = $threads
        CurrentLoad = (Get-CimInstance Win32_Processor | Measure-Object -Property LoadPercentage -Average | Select-Object -ExpandProperty Average)
    } | ConvertTo-Json
''')

# Get memory information
memory_info = run_ps_command('''
    $mem = Get-CimInstance Win32_OperatingSystem
    $total_physical = [math]::Round($mem.TotalVisibleMemorySize/1MB, 2)
    $free_physical = [math]::Round($mem.FreePhysicalMemory/1MB, 2)
    $used_physical = $total_physical - $free_physical
    
    [PSCustomObject]@{
        TotalGB = $total_physical
        FreeGB = $free_physical
        UsedGB = $used_physical
        UsagePercent = [math]::Round(($used_physical/$total_physical)*100, 2)
    } | ConvertTo-Json
''')

# Get disk information
disk_info = run_ps_command('''
    Get-CimInstance Win32_LogicalDisk | Where-Object { $_.DriveType -eq 3 } | ForEach-Object {
        [PSCustomObject]@{
            Drive = $_.DeviceID
            SizeGB = [math]::Round($_.Size/1GB, 2)
            FreeGB = [math]::Round($_.FreeSpace/1GB, 2)
            UsedGB = [math]::Round(($_.Size - $_.FreeSpace)/1GB, 2)
            UsagePercent = [math]::Round((($_.Size - $_.FreeSpace)/$_.Size)*100, 2)
        }
    } | ConvertTo-Json
''')

# Parse and display results
import json

system_info = {
    "os_info": json.loads(os_info),
    "cpu_info": json.loads(cpu_info),
    "memory_info": json.loads(memory_info),
    "disk_info": json.loads(disk_info)
}

pprint(system_info)