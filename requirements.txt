def create_canvas_table(self):
    """Create a canvas-based table to display server metrics without scrolling"""
    # Create container frame that will expand with content
    container_frame = ttkb.Frame(self.content_frame)
    container_frame.pack(fill="x", padx=10, pady=10)
    
    # Create canvas without scrollbars
    self.table_canvas = Canvas(container_frame, bg="white", highlightthickness=0)
    self.table_canvas.pack(fill="x")
    
    # Reduce row height
    self.cell_height = 22  # Reduced from 30
    
    # Initialize font (can use smaller font if needed)
    self.table_font = tkfont.Font(family="Helvetica", size=9)  # Reduced from size 10
    
def draw_table(self):
    """Draw the table with server metrics"""
    if not self.server_details:
        return
        
    # Prepare headers and data (same as before)
    headers = [
        "Server", "Status", "Type", "Ping", "RDP/SSH", 
        "CPU Usage", "RAM Usage", "C Drive", "D Drive", "Uptime"
    ]
    
    data = []
    for server, metrics in self.server_details.items():
        row = [
            server,
            metrics['status'],
            self.server_credentials[server]['type'],
            "✔" if metrics['ping'] else "✖",
            "✔" if metrics['rdp/ssh'] else "✖",
            f"{metrics['cpu_usage']}%" if metrics['status'] == 'Online' else "N/A",
            f"{metrics['ram_usage']}%" if metrics['status'] == 'Online' else "N/A",
            f"{metrics['C_drive']}%" if metrics['status'] == 'Online' else "N/A",
            f"{metrics['D_drive']}%" if metrics['status'] == 'Online' and 'D_drive' in metrics else "N/A",
            f"{metrics['uptime']} days" if metrics['status'] == 'Online' else "N/A"
        ]
        data.append(row)
    
    # Clear existing items
    self.table_canvas.delete("all")
    
    # Get current canvas width
    canvas_width = self.table_canvas.winfo_width()
    if canvas_width < 100:  # Minimum width
        canvas_width = 1000
        
    # Calculate column widths
    col_widths = self.get_column_widths(headers, data, canvas_width)
    
    # Calculate total height needed
    total_height = (len(data) + 1) * self.cell_height
    
    # RESIZE THE CANVAS to fit content (instead of using scrollregion)
    self.table_canvas.config(height=total_height)
    
    # Draw headers (with smaller font)
    x = 0
    for i, header in enumerate(headers):
        w = col_widths[i]
        self.table_canvas.create_rectangle(
            x, 0, x + w, self.cell_height, 
            fill=self.header_bg, outline="gray"
        )
        self.table_canvas.create_text(
            x + w // 2, self.cell_height // 2, 
            text=header, fill=self.header_fg, 
            font=("Helvetica", 9, "bold")  # Smaller font
        )
        x += w
    
    # Draw rows (with smaller font)
    for r, row in enumerate(data):
        y0 = (r + 1) * self.cell_height
        y1 = y0 + self.cell_height
        bg_color = self.alt_bg if r % 2 == 0 else "white"
        x = 0
        
        for c, cell in enumerate(row):
            w = col_widths[c]
            self.table_canvas.create_rectangle(
                x, y0, x + w, y1, 
                fill=bg_color, outline="gray"
            )
            
            # Determine text color based on metric
            if c >= 5 and c <= 8 and "%" in str(cell):  # Metric columns
                try:
                    value = float(str(cell).replace("%", ""))
                    color = self.get_metric_color(value)
                except ValueError:
                    color = "black"
            elif c == 3 or c == 4:  # Ping/RDP columns
                color = "#4caf50" if cell == "✔" else "#f44336"
            else:
                color = "black"
            
            self.table_canvas.create_text(
                x + w // 2, (y0 + y1) // 2, 
                text=cell, fill=color, 
                font=("Helvetica", 9)  # Smaller font
            )
            x += w
    
    # Force update of the layout
    self.table_canvas.update_idletasks()
