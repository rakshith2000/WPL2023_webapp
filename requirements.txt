# Full input text
$text = @"
... paste your full input here ...
"@

# Split into lines
$lines = $text -split "`n"

# Step 1: Find where "Data for Logging:" starts
$dataStart = ($lines | Select-String -Pattern "Data for Logging:").LineNumber
$tableStart = $dataStart + 2  # Skip header + dashed line

# Step 2: Extract table data dynamically
$tableData = @()

for ($i = $tableStart; $i -lt $lines.Count; $i++) {
    $line = $lines[$i].Trim()

    # Stop if line contains variables (e.g., "dfnewname - ...")
    if ($line -match "^\s*\w+\s*-\s*") { break }

    # Skip empty lines or malformed ones
    if ($line -eq "") { continue }

    # Split line into parts - FILE_NAME can have spaces, so we capture that separately
    # Regex captures:
    #   1: Tablespace name
    #   2: File name (greedy up to numbers)
    #   3: Size MB
    #   4: Max MB
    #   5: Incr by MB
    #   6: Auto
    if ($line -match "^(SAMPLE)\s+(.+?)\s+(\d[\d,]*)\s+(\d[\d,]*)\s+(\d+)\s+(YES|NO)$") {
        $tableData += [PSCustomObject]@{
            TABLESPACE_NAME = $matches[1]
            FILE_NAME       = $matches[2].Trim()
            SIZE_MB         = $matches[3]
            MAX_MB          = $matches[4]
            INCR_BY_MB      = $matches[5]
            AUTO            = $matches[6]
        }
    }
}

# Step 3: Extract remaining variables after table
$remainingLines = $lines[$i..($lines.Count - 1)] | Where-Object { $_ -match "-" }

$variables = @{}
foreach ($line in $remainingLines) {
    if ($line -match "^\s*(\S+)\s*-\s*(.+)$") {
        $variables[$matches[1]] = $matches[2].Trim()
    }
}

# Extracted variables
$dfnewname  = $variables["dfnewname"]
$en_latfile = $variables["en_latfile"]
$en_action  = $variables["en_action"]
$en_stat    = $variables["en_stat"]
$dfae       = $variables["dfae"]

# Output
$tableData

Write-Host "`ndfnewname:  $dfnewname"
Write-Host "en_latfile: $en_latfile"
Write-Host "en_action:  $en_action"
Write-Host "en_stat:    $en_stat"
Write-Host "dfae:       $dfae"