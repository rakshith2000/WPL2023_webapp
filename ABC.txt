import ttkbootstrap as ttkb
from ttkbootstrap.constants import *
from ttkbootstrap.style import Style
import tkinter as tk  # Needed for tk.Menu
import psutil

class BaseMeter(tk.Frame):
    def __init__(self, master, value, per_value, max_value, unit, label, sublabel, fg_color, **kwargs):
        super().__init__(master, **kwargs)
        self.value = value
        self.per_value = per_value
        self.max_value = max_value
        self.unit = unit
        self.label = label
        self.sublabel = sublabel
        self.fg_color = fg_color
        # Increased size
        self.outer_radius = 90
        self.inner_radius = 70
        self.center_x = 120
        self.center_y = 135
        self.configure(bg="#FFF0F5")
        self.canvas = tk.Canvas(self, width=240, height=150, bg="#FFF0F5", highlightthickness=0)
        self.canvas.pack()

        self.update_meter_color()
        self.draw_meter()
        self.draw_text()
        self.draw_labels()

    def update_meter_color(self):
        """Determine color based on percentage value"""
        if self.per_value >= 95.00:
            self.fg_color = "#dc3545"  # Red (danger)
        elif self.per_value >= 85.00:
            self.fg_color = "#ffc107"  # Yellow (warning)
        else:
            self.fg_color = "#28a745"  # Green (success)

    def draw_meter(self):
        percent = min(self.value / self.max_value, 1.0)
        extent_angle = -percent * 180

        # Background arc
        self.canvas.create_arc(self.center_x - self.outer_radius, self.center_y - self.outer_radius,
                               self.center_x + self.outer_radius, self.center_y + self.outer_radius,
                               start=180, extent=-180, fill="#E0E0E0", outline="")

        # Foreground arc
        self.canvas.create_arc(self.center_x - self.outer_radius, self.center_y - self.outer_radius,
                               self.center_x + self.outer_radius, self.center_y + self.outer_radius,
                               start=180, extent=extent_angle, fill=self.fg_color, outline="")

        # Inner white arc to create ring effect
        self.canvas.create_arc(self.center_x - self.inner_radius, self.center_y - self.inner_radius,
                               self.center_x + self.inner_radius, self.center_y + self.inner_radius,
                               start=180, extent=-180, fill="white", outline="white")

    def draw_labels(self):
        label_radius = self.outer_radius
        y_offset = self.center_y + 10

        # Left label (Min)
        self.canvas.create_text(self.center_x - label_radius, y_offset,
                                text=f"0 {self.unit}", font=("Helvetica", 10, "bold"),
                                fill="#444", anchor="w")

        # Right label (Max)
        self.canvas.create_text(self.center_x + label_radius, y_offset,
                                text=f"{self.max_value:.0f} {self.unit}", font=("Helvetica", 10, "bold"),
                                fill="#444", anchor="e")

    def draw_text(self):
        pass  # To be defined in subclasses


class CPUSemiCircularMeter(BaseMeter):
    def __init__(self, master, **kwargs):
        cpu_percent = psutil.cpu_percent(interval=1)
        super().__init__(master, value=cpu_percent, per_value=cpu_percent, max_value=100, unit="%", label="CPU Usage",
                         sublabel="", fg_color="#007bff", **kwargs)

    def draw_text(self):
        self.canvas.create_text(self.center_x, 90,
                                text=f"{self.value:.1f}%", font=("Helvetica", 12, "bold"), fill="#333")
        self.canvas.create_text(self.center_x, 115,
                                text=self.label, font=("Helvetica", 10, "bold"), fill="#666")


class StorageSemiCircularMeter(BaseMeter):
    def __init__(self, master, label, path="C:\\", fg_color="#28a745", **kwargs):
        usage = psutil.disk_usage(path) if "Disk" in label else psutil.virtual_memory()
        used_gb = usage.used / (1024 ** 3)
        total_gb = usage.total / (1024 ** 3)
        used_per = (used_gb/total_gb) * 100

        display_value = used_gb
        sublabel = f"{used_gb:.1f} GB {label} Used"

        super().__init__(master, value=display_value, per_value=used_per, max_value=total_gb,
                         unit="GB", label=label, sublabel=sublabel,
                         fg_color=fg_color, **kwargs)

    def draw_text(self):
        self.canvas.create_text(self.center_x, 90,
                                text=f"{self.per_value:.1f}%", font=("Helvetica", 12, "bold"), fill="#333")
        self.canvas.create_text(self.center_x, 115,
                                text=self.sublabel, font=("Helvetica", 10, "bold"), fill="#666")

class SystemHealthCheckDashboard(ttkb.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.pack(fill="both", expand=True)

        # Configure grid layout
        self.columnconfigure(0, weight=0)  # Left pane (fixed)
        self.columnconfigure(1, weight=1)  # Right content area (expandable)
        self.rowconfigure(0, weight=0)  # Header (fixed height)
        self.rowconfigure(1, weight=1)  # Main area (expandable)

        self.create_header()
        self.create_left_pane()
        self.create_main_area()

    def create_header(self):
        header_frame = ttkb.Frame(self, padding=10, bootstyle=PRIMARY)
        header_frame.grid(row=0, column=0, columnspan=2, sticky="nsew")

        header_lbl = ttkb.Label(
            master=header_frame,
            text="System Healthcheck Dashboard",
            bootstyle=(PRIMARY, INVERSE),
            font=("Helvetica", 18, "bold"),
            anchor='center'
        )
        header_lbl.pack(fill="x", expand=True)

    def create_left_pane(self):
        # Create custom styles
        style = ttkb.Style()
        style.configure('Overview.TButton', font=('Calibri', 14, 'bold'))
        style.configure('Get.TButton', font=('Microsoft Sans Serif', 10, 'bold'), foreground='white',
                        background='#28a745', bordercolor='#28a745', darkcolor='#28a745', lightcolor='#28a745',
                        relief='raised', anchor='center')
        style.configure('custom.TLabelframe', bordercolor='#6c757d', background=style.colors.light)
        style.configure('custom.TLabelframe.Label',
                        font=('Calibri', 14, 'bold'),
                        foreground='#343a40',
                        padding=10, background=style.colors.light)

        left_pane = ttkb.Frame(self, padding=10, bootstyle=LIGHT, width=220)
        left_pane.grid(row=1, column=0, sticky="ns")
        left_pane.grid_propagate(False)

        # Overview button
        overview_btn = ttkb.Button(
            left_pane,
            text="Overview",
            bootstyle="success",
            style='Overview.TButton',
        )
        overview_btn.pack(fill="x", pady=(0, 20))

        separator = ttkb.Separator(left_pane, bootstyle=SECONDARY)
        separator.pack(fill="x", pady=(0, 20))

        # Server selection frame with custom styling
        server_frame = ttkb.LabelFrame(
            left_pane,
            text="Select Server",
            bootstyle="info",
            style='custom.TLabelframe',
            labelanchor="nw"
        )
        server_frame.pack(fill="x", pady=(0, 10))

        # Server Menubutton
        self.server_var = ttkb.StringVar(value="Select Server")
        server_menu_btn = ttkb.Menubutton(
            server_frame,
            textvariable=self.server_var,
            bootstyle="primary=outline",
            width=18
        )
        server_menu_btn.pack(fill="x", padx=5, pady=(10, 10))

        # Menu items
        menu = tk.Menu(server_menu_btn, tearoff=0)
        server_menu_btn["menu"] = menu
        servers = ["USWIW1308", "USWIW1309", "USWIW1310", "USWIW1311", "USWIW1312"]
        for server in servers:
            menu.add_radiobutton(label=server, variable=self.server_var, value=server)

        # Get Metrics Button
        get_metrics_btn = ttkb.Button(
            server_frame,
            text="Get Metrics",
            bootstyle="success",
            style="Get.TButton",
            width=15
        )
        get_metrics_btn.pack(pady=(0, 10))

    def create_main_area(self):
        main_area = ttkb.Frame(self, padding=10)
        main_area.grid(row=1, column=1, sticky="nsew")

        # Sample content - replace with your actual content
        # Create container for meters
        self.meters_frame = ttkb.Frame(main_area)
        self.meters_frame.pack(fill="both", expand=True)

        # Initialize meters
        self.cpu_meter = CPUSemiCircularMeter(self.meters_frame)
        self.cpu_meter.pack(side="left", padx=20, pady=10)

        self.ram_meter = StorageSemiCircularMeter(self.meters_frame, label="RAM")
        self.ram_meter.pack(side="left", padx=20, pady=10)

        self.disk_meter = StorageSemiCircularMeter(self.meters_frame, label="Disk", path="C:\\")
        self.disk_meter.pack(side="left", padx=20, pady=10)

        self.update_meters()

    def update_meters(self):
        # Update CPU meter
        cpu_percent = psutil.cpu_percent(interval=1)
        self.cpu_meter.value = cpu_percent
        self.cpu_meter.per_value = cpu_percent
        self.cpu_meter.canvas.delete("all")
        self.cpu_meter.update_meter_color()
        self.cpu_meter.draw_meter()
        self.cpu_meter.draw_text()
        self.cpu_meter.draw_labels()

        # Update RAM meter
        mem = psutil.virtual_memory()
        ram_used = mem.used / (1024 ** 3)
        ram_per = (ram_used / (mem.total / (1024 ** 3))) * 100
        self.ram_meter.value = ram_used
        self.ram_meter.per_value = ram_per
        self.ram_meter.sublabel = f"{ram_used:.1f} GB RAM Used"
        self.ram_meter.canvas.delete("all")
        self.ram_meter.update_meter_color()
        self.ram_meter.draw_meter()
        self.ram_meter.draw_text()
        self.ram_meter.draw_labels()

        # Update Disk meter
        disk = psutil.disk_usage("C:\\")
        disk_used = disk.used / (1024 ** 3)
        disk_per = (disk_used / (disk.total / (1024 ** 3))) * 100
        self.disk_meter.value = disk_used
        self.disk_meter.per_value = disk_per
        self.disk_meter.sublabel = f"{disk_used:.1f} GB Disk Used"
        self.disk_meter.canvas.delete("all")
        self.disk_meter.update_meter_color()
        self.disk_meter.draw_meter()
        self.disk_meter.draw_text()
        self.disk_meter.draw_labels()

        # Schedule next update
        self.after(1000, self.update_meters)


if __name__ == '__main__':
    app = ttkb.Window("Health Check Dashboard", "yeti")
    app.geometry("1200x700")

    # Configure global styles
    # style = ttkb.Style()
    # style.configure('custom.TButton', font=('Calibri', 12))
    '''style.configure('custom.TLabelframe.Label', 
                  font=('Calibri', 12, 'bold'),
                  foreground='#ffffff')'''

    dashboard = SystemHealthCheckDashboard(app)
    app.mainloop()
