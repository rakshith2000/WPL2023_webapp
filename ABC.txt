import tkinter as tk
from tkinter import ttk
import psutil
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import platform
import socket
import ttkbootstrap as tb

class SystemMonitorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("System Health Dashboard")
        self.root.geometry("1000x600")
        self.root.configure(bg="#1e1e2e")
        self.style = tb.Style(theme="darkly")

        ttk.Label(root, text="System Health Dashboard", font=("Helvetica", 22, "bold"), 
                  foreground="white", background="#1e1e2e").pack(pady=15)

        self.container = tk.Frame(root, bg="#1e1e2e", bd=2, relief="ridge")
        self.container.pack(padx=20, pady=10, fill="both", expand=True)
        
        self.gauge_frame = tk.Frame(self.container, bg="#1e1e2e")
        self.gauge_frame.pack(pady=10)
        
        self.fig, self.axs = plt.subplots(2, 2, subplot_kw={'projection': 'polar'}, figsize=(8, 5))
        self.fig.patch.set_facecolor("#1e1e2e")
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.gauge_frame)
        self.canvas.get_tk_widget().pack()

        self.info_frame = ttk.LabelFrame(self.container, text="System Information", style="info.TLabelframe")
        self.info_frame.pack(pady=10, fill="x")
        self.sys_info_label = ttk.Label(self.info_frame, text=self.get_system_info(), font=("Arial", 12), foreground="white", background="#1e1e2e")
        self.sys_info_label.pack(pady=10)
        
        self.update_data()
    
    def get_system_info(self):
        return (f"OS: {platform.system()} {platform.release()}\n"
                f"CPU: {platform.processor()}\n"
                f"Total RAM: {round(psutil.virtual_memory().total / (1024**3), 2)} GB\n"
                f"Hostname: {socket.gethostname()}\n"
                f"IP Address: {socket.gethostbyname(socket.gethostname())}\n"
                f"Uptime: {round(psutil.boot_time() / (60*60*24), 2)} days\n"
                f"CPU Cores: {psutil.cpu_count(logical=True)}")
    
    def update_data(self):
        cpu_usage = psutil.cpu_percent(interval=1)
        mem_usage = psutil.virtual_memory().percent
        disk_c_usage = psutil.disk_usage('C:\\').percent
        disk_d_usage = psutil.disk_usage('D:\\').percent if len(psutil.disk_partitions()) > 1 else 0
        
        self.update_gauge(self.axs[0, 0], cpu_usage, "CPU Usage")
        self.update_gauge(self.axs[0, 1], mem_usage, "Memory Usage")
        self.update_gauge(self.axs[1, 0], disk_c_usage, "Disk C: Usage")
        self.update_gauge(self.axs[1, 1], disk_d_usage, "Disk D: Usage")
        
        self.sys_info_label.config(text=self.get_system_info())
        
        self.root.after(1000, self.update_data)
    
    def update_gauge(self, ax, usage, label):
        ax.clear()
        ax.set_theta_direction(-1)
        
        color = "#4dab6d" if usage < 80 else "#f6ee54" if usage < 95 else "#ee4d55"
        
        ax.bar(x=np.radians(180), width=np.radians(180), height=0.5, bottom=1, 
               color='lightgray', edgecolor='white', linewidth=2, align='edge')
        
        ax.bar(x=np.radians(180), width=np.radians(180 * usage / 100), height=0.5, bottom=1, 
               color=color, edgecolor='white', linewidth=2, align='edge')
        
        ax.set_ylim(0, 2)
        ax.set_xticks(np.radians([0, 45, 90, 135, 180]))
        ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%'], color='white')
        ax.set_title(f'{label}: {usage:.1f}%', pad=10, fontsize=12, fontweight='bold', color='white')
        ax.grid(False)
        ax.set_axis_off()
        
        ax.annotate(f'{usage:.1f}%', xy=(0, 0), xytext=(1.1, 1.8), fontsize=14, color="white", ha="center")
        
        self.canvas.draw()

root = tk.Tk()
app = SystemMonitorApp(root)
root.mainloop()
