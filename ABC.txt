    def create_disk_usage_plots(self, parent_frame):
        """Create meter plots for disk usage with proper organization"""
        # Clear any existing frames first
        for widget in parent_frame.winfo_children():
            widget.destroy()
        
        # C: Drive frame - only create if we have Windows servers
        if any(v["type"] == "Windows" for v in self.server_credentials.values()):
            c_drive_frame = ttkb.LabelFrame(parent_frame, text="C: Drive (Windows) / Root Partition (Linux)", bootstyle="info")
            c_drive_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=(5, 2))
            self.create_meter_rows(c_drive_frame, "C")
        
        # D: Drive frame - only create if we have Windows servers
        if any(v["type"] == "Windows" for v in self.server_credentials.values()):
            d_drive_frame = ttkb.LabelFrame(parent_frame, text="D: Drive (Windows)", bootstyle="info")
            d_drive_frame.pack(fill=tk.BOTH, expand=True, padx=5, pady=(2, 5))
            self.create_meter_rows(d_drive_frame, "D")

    def create_meter_rows(self, parent_frame, drive_type):
        """Create rows of meters with 5 meters per row and increased size"""
        # Get the appropriate servers and usage data
        servers = []
        usages = []
        
        for server, metrics in self.server_details.items():
            if drive_type == "C":
                if self.server_credentials[server]["type"] == "Windows":
                    servers.append(f"{server} (C:)")
                    usages.append(metrics['C_drive'])
                else:  # Linux
                    servers.append(f"{server} (/)")
                    usages.append(metrics['C_drive'])
            elif drive_type == "D" and self.server_credentials[server]["type"] == "Windows":
                servers.append(f"{server} (D:)")
                usages.append(metrics['D_drive'])
        
        # Calculate number of rows needed (5 meters per row)
        num_servers = len(servers)
        if num_servers == 0:
            return
            
        num_rows = (num_servers + 4) // 5  # Round up
        
        for row in range(num_rows):
            row_frame = ttkb.Frame(parent_frame)
            row_frame.pack(fill=tk.X, expand=True)
            
            # Get servers and usages for this row
            start_idx = row * 5
            end_idx = min((row + 1) * 5, num_servers)
            row_servers = servers[start_idx:end_idx]
            row_usages = usages[start_idx:end_idx]
            
            # Create meters for this row with increased size
            for server, usage in zip(row_servers, row_usages):
                meter_style = self.get_meter_style(usage)
                meter = ttkb.Meter(
                    row_frame,
                    amountused=usage,
                    meterthickness=20,  # Increased thickness
                    metersize=80,       # Increased size (default is 75)
                    bootstyle=meter_style,
                    interactive=False,
                    textfont=['Times', 14, 'bold'],  # Larger font
                    textright='%',
                    subtext=server,
                    subtextfont=['Times', 10, 'bold'],  # Larger font
                    subtextstyle="secondary",
                    stripethickness=2
                )
                meter.pack(side=tk.LEFT, expand=True, fill=tk.X, padx=5, pady=5)
