import tkinter as tk
from tkinter import ttk
import psutil
import platform
import socket
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class SystemMonitorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("System Health Dashboard")
        self.root.geometry("1000x600")
        self.root.configure(bg="#222831")
        
        ttk.Label(root, text="System Health Dashboard", font=("Helvetica", 20, "bold"), 
                  foreground="white", background="#222831").pack(pady=15)
        
        self.main_frame = tk.Frame(root, bg="#222831")
        self.main_frame.pack(fill=tk.BOTH, expand=True)
        
        self.info_frame = tk.Frame(self.main_frame, bg="#30475E", padx=10, pady=10)
        self.info_frame.pack(side=tk.LEFT, fill=tk.Y, padx=20, pady=20)
        
        self.gauge_frame = tk.Frame(self.main_frame, bg="#222831")
        self.gauge_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=20)
        
        self.fig, self.axs = plt.subplots(2, 2, subplot_kw={'projection': 'polar'}, figsize=(8, 5))
        self.fig.patch.set_facecolor("#222831")
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.gauge_frame)
        self.canvas.get_tk_widget().pack()
        
        self.display_system_info()
        self.update_data()
    
    def display_system_info(self):
        system_info = {
            "OS": platform.system() + " " + platform.release(),
            "CPU": platform.processor(),
            "Total RAM": f"{round(psutil.virtual_memory().total / (1024 ** 3), 2)} GB",
            "Hostname": socket.gethostname(),
            "IP Address": socket.gethostbyname(socket.gethostname()),
            "Uptime": f"{round(psutil.boot_time() / (60 * 60 * 24), 2)} days",
            "CPU Cores": psutil.cpu_count(logical=True)
        }
        
        ttk.Label(self.info_frame, text="System Information", font=("Helvetica", 14, "bold"), 
                  foreground="white", background="#30475E").pack(pady=5)
        
        for key, value in system_info.items():
            ttk.Label(self.info_frame, text=f"{key}: {value}", font=("Helvetica", 12), 
                      foreground="white", background="#30475E").pack(anchor="w", pady=2)
    
    def update_data(self):
        cpu_usage = psutil.cpu_percent(interval=1)
        mem_usage = psutil.virtual_memory().percent
        disk_c_usage = psutil.disk_usage('C:\\').percent
        disk_d_usage = psutil.disk_usage('D:\\').percent if len(psutil.disk_partitions()) > 1 else 0
        
        self.update_gauge(self.axs[0, 0], cpu_usage, "CPU Usage")
        self.update_gauge(self.axs[0, 1], mem_usage, "Memory Usage")
        self.update_gauge(self.axs[1, 0], disk_c_usage, "Disk C: Usage")
        self.update_gauge(self.axs[1, 1], disk_d_usage, "Disk D: Usage")
        
        self.root.after(1000, self.update_data)
    
    def update_gauge(self, ax, usage, label):
        ax.clear()
        ax.set_theta_direction(-1)
        
        color = "#4dab6d" if usage < 80 else "#f6ee54" if usage < 95 else "#ee4d55"
        
        ax.bar(x=np.radians(180), width=np.radians(180), height=0.5, bottom=1, 
               color='lightgray', edgecolor='white', linewidth=2, align='edge')
        
        ax.bar(x=np.radians(180), width=np.radians(180 * usage / 100), height=0.5, bottom=1, 
               color=color, edgecolor='white', linewidth=2, align='edge')
        
        ax.set_ylim(0, 2)
        ax.set_xticks(np.radians([0, 45, 90, 135, 180]))
        ax.set_xticklabels(['0%', '25%', '50%', '75%', '100%'], color='white')
        ax.set_title(f'{label}: {usage:.1f}%', pad=10, fontsize=12, fontweight='bold', color='white')
        ax.grid(False)
        ax.set_axis_off()
        
        ax.annotate(f'{usage:.1f}%', xy=(0, 0), xytext=(1.1, 1.8), fontsize=14, color="white", ha="center")
        
        self.canvas.draw()

root = tk.Tk()
app = SystemMonitorApp(root)
root.mainloop()
