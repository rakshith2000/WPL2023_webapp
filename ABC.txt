import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import random  # For testing purposes

class SystemHealthCheckDashboard(ttkb.Frame):
    # ... (keep all your existing methods and init code)
    
    def display_metrics(self):
        # Clear previous content
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
        # Create plots
        self.create_plots()
        # Update plots with actual data
        self.update_plots_with_metrics()
        
    def create_plots(self):
        """Initialize the empty plots"""
        self.canvases = []
        self.figures = []
        self.axes = []
        
        # Create 2 plots (CPU - vertical bar, RAM - horizontal bar)
        for i in range(2):
            fig, ax = plt.subplots(figsize=(9, 3))
            self.figures.append(fig)
            self.axes.append(ax)
            
            canvas = FigureCanvasTkAgg(fig, master=self.content_frame)
            canvas.draw()
            widget = canvas.get_tk_widget()
            widget.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
            self.canvases.append(canvas)
            
            if i < 1:  # Add separator between plots
                ttkb.Separator(self.content_frame, orient='horizontal').pack(fill=tk.X, padx=10, pady=5)

    def get_colors(self, values):
        """Determine bar colors based on percentage"""
        colors = []
        for val in values:
            if val >= 95:
                colors.append('red')
            elif val >= 85:
                colors.append('yellow')
            else:
                colors.append('green')
        return colors

    def update_plots_with_metrics(self):
        """Update all plots with actual metrics data"""
        # Prepare data from collected metrics
        servers = []
        cpu_usage = []
        ram_usage = []
        
        for server, metrics in self.server_details.items():
            servers.append(server)
            cpu_usage.append(metrics['cpu_usage'])
            ram_usage.append(metrics['ram_usage'])
        
        # Clear previous plots
        for ax in self.axes:
            ax.clear()
        
        # 1. CPU Usage Plot (Vertical Bar)
        cpu_colors = self.get_colors(cpu_usage)
        self.axes[0].bar(servers, cpu_usage, color=cpu_colors)
        self.axes[0].set_title("CPU Usage (%)", fontweight="bold")
        self.axes[0].set_ylim(0, 100)
        self.axes[0].grid(axis='y', linestyle='--', alpha=0.7)
        self.axes[0].tick_params(axis='x', rotation=45)
        for i, val in enumerate(cpu_usage):
            self.axes[0].text(i, val + 2, f"{val}%", ha='center')

        # 2. RAM Usage Plot (Horizontal Bar)
        ram_colors = self.get_colors(ram_usage)
        self.axes[1].barh(servers, ram_usage, color=ram_colors)
        self.axes[1].set_title("RAM Usage (%)", fontweight="bold")
        self.axes[1].set_xlim(0, 100)
        self.axes[1].grid(axis='x', linestyle='--', alpha=0.7)
        for i, val in enumerate(ram_usage):
            self.axes[1].text(val + 1, i, f"{val}%", va='center')

        # Redraw all canvases
        for canvas in self.canvases:
            canvas.draw()
