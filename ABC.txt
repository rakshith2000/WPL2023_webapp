import ttkbootstrap as ttkb
from ttkbootstrap.constants import *
from ttkbootstrap.style import Style
from ttkbootstrap.scrolled import ScrolledFrame
import tkinter as tk
import psutil, wmi, socket, platform, subprocess, paramiko, re
from datetime import datetime
import threading
from queue import Queue
from concurrent.futures import ThreadPoolExecutor
import pythoncom
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

class SystemHealthCheckDashboard(ttkb.Frame):
    # [Previous methods remain the same until create_plots()]

    def create_plots(self):
        """Initialize the empty plots with equal width frames"""
        self.canvases = []
        self.figures = []
        self.axes = []
        
        # Create a container frame for the two server type frames
        container_frame = ttkb.Frame(self.content_frame)
        container_frame.pack(fill=tk.BOTH, expand=True)
        
        # Configure equal columns in the container
        container_frame.columnconfigure(0, weight=1, uniform="equal")
        container_frame.columnconfigure(1, weight=1, uniform="equal")
        
        # Create frames for Windows and Linux servers with equal width
        windows_frame = ttkb.LabelFrame(container_frame, text="Windows Servers", bootstyle="info")
        windows_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        
        linux_frame = ttkb.LabelFrame(container_frame, text="Linux Servers", bootstyle="danger")
        linux_frame.grid(row=0, column=1, sticky="nsew", padx=5, pady=5)
        
        # Make both frames expand equally
        windows_frame.grid_propagate(False)
        linux_frame.grid_propagate(False)
        
        # Create plots for Windows servers
        self.create_server_type_plots(windows_frame, "Windows")
        
        # Add separator
        ttkb.Separator(self.content_frame, orient='horizontal').pack(fill=tk.X, padx=10, pady=5)
        
        # Create plots for Linux servers
        self.create_server_type_plots(linux_frame, "Linux")

    def create_server_type_plots(self, parent_frame, server_type):
        """Create CPU and RAM plots for a specific server type"""
        # Configure grid for equal distribution
        parent_frame.rowconfigure(0, weight=1)
        parent_frame.rowconfigure(1, weight=1)
        
        # CPU Plot
        fig_cpu, ax_cpu = plt.subplots(figsize=(6, 2.5))  # Slightly smaller to fit side by side
        self.figures.append(fig_cpu)
        self.axes.append(ax_cpu)
        
        canvas_cpu = FigureCanvasTkAgg(fig_cpu, master=parent_frame)
        canvas_cpu.draw()
        widget_cpu = canvas_cpu.get_tk_widget()
        widget_cpu.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        self.canvases.append(canvas_cpu)
        
        # RAM Plot
        fig_ram, ax_ram = plt.subplots(figsize=(6, 2.5))  # Slightly smaller to fit side by side
        self.figures.append(fig_ram)
        self.axes.append(ax_ram)
        
        canvas_ram = FigureCanvasTkAgg(fig_ram, master=parent_frame)
        canvas_ram.draw()
        widget_ram = canvas_ram.get_tk_widget()
        widget_ram.grid(row=1, column=0, sticky="nsew", padx=5, pady=5)
        self.canvases.append(canvas_ram)

    # [Rest of the methods remain the same]

if __name__ == '__main__':
    app = ttkb.Window("Health Check Dashboard", "yeti")
    app.state('zoomed')
    dashboard = SystemHealthCheckDashboard(app)
    app.mainloop()
