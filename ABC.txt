import ttkbootstrap as ttkb
from ttkbootstrap.constants import *
from ttkbootstrap.style import Style
from ttkbootstrap.scrolled import ScrolledFrame
import tkinter as tk
import psutil, wmi, socket, platform, subprocess, paramiko, re
from datetime import datetime
import threading
from queue import Queue
from concurrent.futures import ThreadPoolExecutor, as_completed
import pythoncom  # Import pythoncom for COM initialization

class SystemHealthCheckDashboard(ttkb.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.pack(fill="both", expand=True)
        
        # Server credentials (redacted for security)
        user1 = "user1" # Windows servers
        password1 = "c3hbihbu99b^*(bjbjb3v"
        user2 = "user2" # Linux servers
        password2 = "Mhgvhgco&frr$Bt1"
        
        self.server_credentials = {
            "USWIW1489": {"type": "Windows", "user": user1, "password": password1},
            "USWIW1490": {"type": "Windows", "user": user1, "password": password1},
            "USWIW1492": {"type": "Windows", "user": user1, "password": password1},
            "USWIW1530": {"type": "Windows", "user": user1, "password": password1},
            "USWIW1531": {"type": "Windows", "user": user1, "password": password1},
            "USWIW1533": {"type": "Windows", "user": user1, "password": password1},
            "USWIW714": {"type": "Windows", "user": user1, "password": password1},
            "USWIW715": {"type": "Windows", "user": user1, "password": password1},
            "USWIW716": {"type": "Windows", "user": user1, "password": password1},
            "USWIX733": {"type": "Linux", "user": user2, "password": password2},
        }

        # Configure grid layout
        self.columnconfigure(0, weight=0)  # Left pane (fixed)
        self.columnconfigure(1, weight=1)  # Right content area (expandable)
        self.rowconfigure(0, weight=0)  # Header (fixed height)
        self.rowconfigure(1, weight=1)  # Main area (expandable)

        self.create_header()
        self.create_left_pane()
        self.create_main_area()
        
        self.current_server = None
        self.wmi_conn = None
        self.os_info = None
        self.processor_info = None
        self.disks_info = None
        self.computer_system_info = None
        self.server_details = {}  # To store collected metrics
        self.metrics_thread = None
        self.stop_event = threading.Event()

    def create_header(self):
        header_frame = ttkb.Frame(self, padding=10, bootstyle=PRIMARY)
        header_frame.grid(row=0, column=0, columnspan=2, sticky="nsew")

        header_lbl = ttkb.Label(
            master=header_frame,
            text="JDA Application Healthcheck Dashboard",
            bootstyle=(PRIMARY, INVERSE),
            font=("Helvetica", 18, "bold"),
            anchor='center'
        )
        header_lbl.pack(fill="x", expand=True)

    def create_left_pane(self):
        style = ttkb.Style()
        style.configure('Overview.TButton', font=('Calibri', 14, 'bold'))
        style.configure('Get.TButton', font=('Microsoft Sans Serif', 10, 'bold'), 
                       foreground='white', background='#28a745', bordercolor='#28a745', 
                       darkcolor='#28a745', lightcolor='#28a745', relief='raised', anchor='center')
        style.configure('custom.TLabelframe', bordercolor='#6c757d', background=style.colors.light)
        style.configure('custom.TLabelframe.Label',
                      font=('Calibri', 14, 'bold'),
                      foreground='#343a40',
                      padding=10, background=style.colors.light)

        left_pane = ttkb.Frame(self, padding=10, bootstyle=LIGHT, width=220)
        left_pane.grid(row=1, column=0, sticky="ns")
        left_pane.grid_propagate(False)

        overview_btn = ttkb.Button(
            left_pane,
            text="JDA Overview",
            bootstyle="success",
            style='Overview.TButton',
        )
        overview_btn.pack(fill="x", pady=(0, 20))

        separator = ttkb.Separator(left_pane, bootstyle=SECONDARY)
        separator.pack(fill="x", pady=(0, 20))

        server_frame = ttkb.LabelFrame(
            left_pane,
            text="Select Server",
            bootstyle="info",
            style='custom.TLabelframe',
            labelanchor="nw"
        )
        server_frame.pack(fill="x", pady=(0, 10))

        self.server_var = ttkb.StringVar(value="Select Server")
        server_menu_btn = ttkb.Menubutton(
            server_frame,
            textvariable=self.server_var,
            bootstyle="primary-outline",
            width=18
        )
        server_menu_btn.pack(fill="x", padx=5, pady=(10, 10))

        menu = tk.Menu(server_menu_btn, tearoff=1)
        server_menu_btn["menu"] = menu
        menu.delete(0)
        menu.add_command(label="Windows Servers", state="disabled", font=("Calibri", 10, "bold"))
        win_servers = [server for server, details in self.server_credentials.items() if details["type"] == "Windows"]
        for server in win_servers:
            menu.add_radiobutton(label=f"    {server}", variable=self.server_var, value=server)
            
        menu.add_separator()
        
        menu.add_command(label="Linux Servers", state="disabled", font=("Calibri", 10, "bold"))
        lin_servers = [server for server, details in self.server_credentials.items() if details["type"] == "Linux"]
        for server in lin_servers:
            menu.add_radiobutton(label=f"    {server}", variable=self.server_var, value=server)

        self.get_metrics_btn = ttkb.Button(
            server_frame,
            text="Get Metrics",
            bootstyle="success",
            style="Get.TButton",
            width=15,
            command=self.start_metrics_collection
        )
        self.get_metrics_btn.pack(pady=(0, 10))
        
        self.cancel_btn = ttkb.Button(
            server_frame,
            text="Cancel",
            bootstyle="danger",
            style="Get.TButton",
            width=15,
            command=self.cancel_metrics_collection,
            state="disabled"
        )
        self.cancel_btn.pack(pady=(0, 10))
        
    def create_main_area(self):
        self.main_area = ttkb.Frame(self, padding=(10, 10, 10, 10))
        self.main_area.grid(row=1, column=1, sticky="nsew")
        
        self.content_frame = ScrolledFrame(self.main_area)
        self.content_frame.pack(fill="both", expand=True)
        
        self.loading_label = ttkb.Label(
            self.content_frame,
            text="Select a server and click 'Get Metrics'",
            font=("Calibri", 14, "bold"),
            bootstyle=INFO
        )
        self.loading_label.pack(expand=True)
        
        # Add progress bar
        self.progress = ttkb.Progressbar(
            self.content_frame,
            bootstyle="success-striped",
            mode="determinate"
        )
        
        # Add status label
        self.status_label = ttkb.Label(
            self.content_frame,
            text="",
            font=("Calibri", 10),
            bootstyle=INFO
        )
        
    def check_rdp_connectivity(self, server, port=3389):
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(5)
        try:
            result = sock.connect_ex((server, port))
            sock.close()
            return result == 0
        except Exception:
            return False
        
    def get_windows_metrics(self, server, credentials):
        metrics = {
            'ping': False,
            'rdp': False,
            'cpu_usage': 0,
            'ram_usage': 0,
            'C_drive': 0,
            'D_drive': 0,
            'status': 'offline'
        }
        
        try:
            pythoncom.CoInitialize()  # Initialize COM for this thread

            # Check if we should stop
            if self.stop_event.is_set():
                return {server: metrics}
                
            # Update progress
            self.update_progress(f"Checking {server}...")
            
            # Check ping
            try:
                ping_result = subprocess.run(['ping', '-n', '2', server], 
                                           capture_output=True, 
                                           text=True,
                                           timeout=5).returncode
                metrics['ping'] = ping_result == 0
            except subprocess.TimeoutExpired:
                metrics['ping'] = False
                
            if not metrics['ping']:
                return {server: metrics}
                
            # Check RDP
            metrics['rdp'] = self.check_rdp_connectivity(server)
            
            # Connect via WMI
            try:
                conn = wmi.WMI(server, 
                              user=credentials['user'], 
                              password=credentials['password'],
                              timeout=5)
                
                # CPU Usage
                metrics['cpu_usage'] = conn.Win32_Processor()[0].LoadPercentage
                
                # RAM Usage
                total_ram = int(conn.Win32_ComputerSystem()[0].TotalPhysicalMemory)
                free_ram = int(conn.Win32_OperatingSystem()[0].FreePhysicalMemory) * 1024
                metrics['ram_usage'] = round(((total_ram - free_ram) / total_ram) * 100, 1)
                
                # Drive Usage (C: and D:)
                drives = conn.Win32_LogicalDisk(DriveType=3)
                for drive in drives:
                    if drive.DeviceID == "C:":
                        metrics['C_drive'] = round((int(drive.Size) - int(drive.FreeSpace)) / int(drive.Size) * 100, 1)
                    elif drive.DeviceID == "D:":
                        metrics['D_drive'] = round((int(drive.Size) - int(drive.FreeSpace)) / int(drive.Size) * 100, 1)
                
                metrics['status'] = 'online'
            except Exception as e:
                self.update_progress(f"Error connecting to {server}: {str(e)}")
        except Exception as e:
            self.update_progress(f"Error getting metrics for {server}: {str(e)}")
        finally:
            pythoncom.CoUninitialize()  # Clean up COM for this thread
        
        return {server: metrics}

    def get_linux_metrics(self, server, credentials):
        metrics = {
            'ping': False,
            'rdp': False,
            'cpu_usage': 0,
            'ram_usage': 0,
            'C_drive': 0,
            'D_drive': 0,
            'status': 'offline'
        }
        
        try:
            # Check if we should stop
            if self.stop_event.is_set():
                return {server: metrics}
                
            self.update_progress(f"Checking {server}...")
            
            # Check ping
            try:
                ping_result = subprocess.run(['ping', '-c', '2', server], 
                                           capture_output=True, 
                                           text=True,
                                           timeout=5).returncode
                metrics['ping'] = ping_result == 0
            except subprocess.TimeoutExpired:
                metrics['ping'] = False
                
            if not metrics['ping']:
                return {server: metrics}
                
            # SSH connection would go here
            # For now just mark as online if ping succeeds
            metrics['status'] = 'online'
            
        except Exception as e:
            self.update_progress(f"Error getting Linux metrics for {server}: {str(e)}")
            
        return {server: metrics}

    def start_metrics_collection(self):
        """Start metrics collection in a separate thread"""
        self.stop_event.clear()
        self.server_details = {}
        
        # Clear previous content and show progress
        for widget in self.content_frame.winfo_children():
            widget.destroy()
            
        self.loading_label.pack(expand=True)
        self.progress.pack(fill="x", pady=10)
        self.status_label.pack(fill="x", pady=5)
        
        self.loading_label.config(text="Collecting metrics... Please wait")
        self.progress["value"] = 0
        self.progress["maximum"] = len(self.server_credentials)
        self.status_label.config(text="Starting...")
        
        # Disable buttons during collection
        self.get_metrics_btn.config(state="disabled")
        self.cancel_btn.config(state="enabled")
        
        # Start collection in a separate thread
        self.metrics_thread = threading.Thread(
            target=self.collect_metrics_thread,
            daemon=True
        )
        self.metrics_thread.start()
        
        # Start checking progress
        self.check_progress()

    def collect_metrics_thread(self):
        """Thread function to collect metrics from all servers"""
        try:
            with ThreadPoolExecutor(max_workers=10) as executor:
                futures = {}
                
                # Start all tasks
                for server, credentials in self.server_credentials.items():
                    if self.stop_event.is_set():
                        break
                        
                    if credentials["type"] == "Windows":
                        future = executor.submit(self.get_windows_metrics, server, credentials)
                    else:
                        future = executor.submit(self.get_linux_metrics, server, credentials)
                    futures[future] = server
                
                # Process results as they come in
                for future in as_completed(futures):
                    if self.stop_event.is_set():
                        break
                        
                    server = futures[future]
                    try:
                        result = future.result()
                        self.server_details.update(result)
                    except Exception as e:
                        self.update_progress(f"Error processing {server}: {str(e)}")
                        
            if not self.stop_event.is_set():
                self.after(0, self.metrics_complete)
                
        except Exception as e:
            self.update_progress(f"Error in metrics collection: {str(e)}")
            self.after(0, self.metrics_complete)

    def update_progress(self, message):
        """Thread-safe way to update progress"""
        self.after(0, lambda: self.status_label.config(text=message))

    def check_progress(self):
        """Update progress bar periodically"""
        if hasattr(self, 'server_details'):
            progress = len(self.server_details)
            total = len(self.server_credentials)
            self.progress["value"] = progress
            
            if progress < total and not self.stop_event.is_set():
                self.after(100, self.check_progress)

    def metrics_complete(self):
        """Called when metrics collection is complete"""
        self.progress["value"] = len(self.server_credentials)
        self.status_label.config(text="Metrics collection complete!")
        self.loading_label.config(text="Displaying results...")
        
        # Re-enable buttons
        self.get_metrics_btn.config(state="enabled")
        self.cancel_btn.config(state="disabled")
        
        # Display results
        self.display_metrics()

    def cancel_metrics_collection(self):
        """Cancel the ongoing metrics collection"""
        self.stop_event.set()
        self.status_label.config(text="Cancelling... Please wait")
        self.cancel_btn.config(state="disabled")

    def display_metrics(self):
        """Display collected metrics in a treeview"""
        # Clear previous content
        for widget in self.content_frame.winfo_children():
            widget.destroy()

        # Create and populate the treeview with metrics
        columns = ('Server', 'Status', 'Ping', 'RDP/SSH', 'CPU %', 'RAM %', 'C Drive %', 'D Drive %')
        tree = ttkb.Treeview(self.content_frame, columns=columns, show='headings', bootstyle="info")
        
        # Define headings
        for col in columns:
            tree.heading(col, text=col)
            tree.column(col, width=100, anchor='center')
        
        # Add data to the treeview
        for server, metrics in self.server_details.items():
            status = "🟢" if metrics['status'] == 'online' else "🔴"
            ping = "✔" if metrics['ping'] else "✖"
            rdp = "✔" if metrics['rdp'] else "✖"
            
            tree.insert('', 'end', values=(
                server,
                status,
                ping,
                rdp,
                metrics['cpu_usage'],
                metrics['ram_usage'],
                metrics['C_drive'],
                metrics['D_drive']
            ))
        
        tree.pack(fill='both', expand=True)

if __name__ == '__main__':
    app = ttkb.Window("Health Check Dashboard", "yeti")
    app.state('zoomed')
    dashboard = SystemHealthCheckDashboard(app)
    app.mainloop()
