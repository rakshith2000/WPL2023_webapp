
Code
server_list = ['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com']
import tkinter as tk
from tkinter import ttk
import subprocess
import time
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import wmi
​
# Function to check the server ping
def check_ping(remote_server):
    try:
        response = subprocess.run(['ping', '-n', '1', remote_server], stdout=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error pinging server: {e}")
        return False
​
# Function to check if RDP connection is available
def check_rdp(remote_server):
    try:
        response = subprocess.run(['telnet', remote_server, '3389'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking RDP: {e}")
        return False
​
# Function to get disk usage and total size using WMI for a remote server
def get_disk_usage(remote_server, username, password, drive_letter):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
                return usage_percent, total_size, used_space, free_space
    except Exception as e:
        print(f"Error getting disk usage: {e}")
        return 0, 0, 0, 0
​
# Function to get server uptime in days using WMI for a remote server
def get_uptime(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for os in c.Win32_OperatingSystem():
            last_boot = os.LastBootUpTime.split()[0]  # Parse the last boot time
            boot_time = time.strptime(last_boot, '%Y-%m-%d')  # Convert to struct_time
            uptime_seconds = time.mktime(time.gmtime()) - time.mktime(boot_time)
            uptime_days = uptime_seconds // (24 * 3600)
            return uptime_days
    except Exception as e:
        print(f"Error getting uptime: {e}")
        return 0
​
# Function to update server metrics
def update_metrics(remote_server, username, password):
    # Update Ping status
    ping_status = check_ping(remote_server)
    ping_label.config(text=f"Ping: {'True' if ping_status else 'False'}", fg="green" if ping_status else "red")
    
    # Update RDP connection status
    rdp_status = check_rdp(remote_server)
    rdp_label.config(text=f"RDP Connection: {'True' if rdp_status else 'False'}", fg="green" if rdp_status else "red")
    
    # Update C: and D: drive usage
    c_drive_usage, c_total_size, c_used_space, c_free_space = get_disk_usage(remote_server, username, password, 'C:')
    d_drive_usage, d_total_size, d_used_space, d_free_space = get_disk_usage(remote_server, username, password, 'D:')
    
    # Plot C: drive speedometer
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
    
    # Plot D: drive speedometer
    draw_speedometer(d_drive_usage, d_total_size, d_used_space, d_free_space, ax_d)
    
    # Update Uptime
    uptime = get_uptime(remote_server, username, password)
    uptime_label.config(text=f"Uptime: {uptime} days")
​
# Function to draw the speedometer with updated color scheme
def draw_speedometer(usage_percent, total_size, used_space, free_space, ax):
    ax.clear()
    ax.set_title("Disk Usage")
    ax.set_xlim(0, 100)
    ax.set_ylim(0, 1)
    ax.set_theta_direction(-1)
    
    # Define color for used space based on usage
    if usage_percent > 95:
        used_color = 'red'  # Red for high usage
    else:
        used_color = 'green'  # Green for lower usage
    
    # Draw the free space (gray)
    ax.barh(0, 1, left=0, height=0.2, color='gray', alpha=0.5)
    
    # Draw the used space (green or red)
    theta = 2 * 3.14159 * (usage_percent / 100)
    ax.barh(0, 1, left=0, height=0.2, color=used_color, alpha=0.7, theta=theta)
    
    # Add the legend and GB data
    ax.text(50, 0.25, f"Used: {used_space:.2f} GB ({usage_percent:.1f}%)", horizontalalignment='center', verticalalignment='center', fontweight='bold')
    ax.text(50, 0.15, f"Free: {free_space:.2f} GB ({100 - usage_percent:.1f}%)", horizontalalignment='center', verticalalignment='center', fontweight='bold')
​
    # Display range in GB below the gauge
    ax.set_xticks([0, 100])
    ax.set_xticklabels([f"0 GB", f"{total_size:.2f} GB"])
    
    canvas.draw()
​
# Creating the main window
root = tk.Tk()
root.title("Server Health Check Dashboard")
​
# Server selection dropdown
server_list = ['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com']  # Replace with actual IP addresses or hostnames of the remote servers
server_var = tk.StringVar(value=server_list[0])
​
dropdown_label = tk.Label(root, text="Select Server")
dropdown_label.grid(row=0, column=0, padx=10, pady=10)
​
server_dropdown = ttk.Combobox(root, textvariable=server_var, values=server_list)
server_dropdown.grid(row=0, column=1, padx=10, pady=10)
​
# Server credentials (modify these as needed)
username = "kosv1106"  # Replace with the username for the remote server
password = "c3RM21nvPx2&%32fsp93v"  # Replace with the password for the above user
​
# Buttons to update metrics
update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
update_button.grid(row=1, column=0, columnspan=2, pady=20)
​
# Display metrics
ping_label = tk.Label(root, text="Ping: Pending", font=('Arial', 12))
ping_label.grid(row=2, column=0, columnspan=2, pady=5)
​
rdp_label = tk.Label(root, text="RDP Connection: Pending", font=('Arial', 12))
rdp_label.grid(row=3, column=0, columnspan=2, pady=5)
​
uptime_label = tk.Label(root, text="Uptime: Pending", font=('Arial', 12))
uptime_label.grid(row=4, column=0, columnspan=2, pady=5)
​
# Set up matplotlib figure for speedometers
fig, (ax_c, ax_d) = plt.subplots(1, 2, figsize=(10, 4))
​
# C: drive usage
ax_c.set_title("C: Drive")
ax_c.set_xlim(0, 100)
ax_c.set_ylim(0, 1)
​
# D: drive usage
ax_d.set_title("D: Drive")
ax_d.set_xlim(0, 100)
ax_d.set_ylim(0, 1)
​
# Canvas to embed matplotlib plot
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().grid(row=5, column=0, columnspan=2)
​
# Start the Tkinter event loop
root.mainloop()
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\tkinter\__init__.py", line 1892, in __call__
    return self.func(*args)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/2720086366.py", line 136, in <lambda>
    update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/2720086366.py", line 77, in update_metrics
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/2720086366.py", line 92, in draw_speedometer
    ax.set_theta_direction(-1)
AttributeError: 'AxesSubplot' object has no attribute 'set_theta_direction'
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\tkinter\__init__.py", line 1892, in __call__
    return self.func(*args)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/2720086366.py", line 136, in <lambda>
    update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/2720086366.py", line 77, in update_metrics
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/2720086366.py", line 92, in draw_speedometer
    ax.set_theta_direction(-1)
AttributeError: 'AxesSubplot' object has no attribute 'set_theta_direction'

username = "kosv1106"  # Replace with the username for the remote server
password = "c3RM21nvPx2&%32fsp93v"
import tkinter as tk
from tkinter import ttk
import subprocess
import time
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import wmi
​
# Function to check the server ping
def check_ping(remote_server):
    try:
        response = subprocess.run(['ping', '-n', '1', remote_server], stdout=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error pinging server: {e}")
        return False
​
# Function to check if RDP connection is available
def check_rdp(remote_server):
    try:
        response = subprocess.run(['telnet', remote_server, '3389'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking RDP: {e}")
        return False
​
# Function to get disk usage and total size using WMI for a remote server
def get_disk_usage(remote_server, username, password, drive_letter):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
                return usage_percent, total_size, used_space, free_space
    except Exception as e:
        print(f"Error getting disk usage: {e}")
        return 0, 0, 0, 0
​
# Function to get server uptime in days using WMI for a remote server
def get_uptime(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for os in c.Win32_OperatingSystem():
            last_boot = os.LastBootUpTime.split()[0]  # Parse the last boot time
            boot_time = time.strptime(last_boot, '%Y-%m-%d')  # Convert to struct_time
            uptime_seconds = time.mktime(time.gmtime()) - time.mktime(boot_time)
            uptime_days = uptime_seconds // (24 * 3600)
            return uptime_days
    except Exception as e:
        print(f"Error getting uptime: {e}")
        return 0
​
# Function to update server metrics
def update_metrics(remote_server, username, password):
    # Update Ping status
    ping_status = check_ping(remote_server)
    ping_label.config(text=f"Ping: {'True' if ping_status else 'False'}", fg="green" if ping_status else "red")
    
    # Update RDP connection status
    rdp_status = check_rdp(remote_server)
    rdp_label.config(text=f"RDP Connection: {'True' if rdp_status else 'False'}", fg="green" if rdp_status else "red")
    
    # Update C: and D: drive usage
    c_drive_usage, c_total_size, c_used_space, c_free_space = get_disk_usage(remote_server, username, password, 'C:')
    d_drive_usage, d_total_size, d_used_space, d_free_space = get_disk_usage(remote_server, username, password, 'D:')
    
    # Plot C: drive speedometer
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
    
    # Plot D: drive speedometer
    draw_speedometer(d_drive_usage, d_total_size, d_used_space, d_free_space, ax_d)
    
    # Update Uptime
    uptime = get_uptime(remote_server, username, password)
    uptime_label.config(text=f"Uptime: {uptime} days")
​
# Function to draw the speedometer with updated color scheme
def draw_speedometer(usage_percent, total_size, used_space, free_space, ax):
    ax.clear()
​
    # Set the plot to polar coordinates
    ax.set_theta_offset(3.14159)  # Start from the left (half-circle)
    ax.set_theta_direction(-1)  # Clockwise rotation
​
    # Create the full circle for free space (gray color)
    ax.bar(0, 1, width=3.14159, color='gray', alpha=0.3)  # 180 degrees for free space (gray)
​
    # Define the angle for the used space (in radians)
    angle = (usage_percent / 100) * 3.14159  # Angle in radians
    
    # Define color for used space based on usage
    if usage_percent > 95:
        used_color = 'red'  # Red for high usage
    else:
        used_color = 'green'  # Green for lower usage
    
    # Draw the used space (green or red)
    ax.bar(0, 1, width=angle, color=used_color, alpha=0.7)  # Used space (variable width)
​
    # Add the legend and GB data
    ax.text(0, 0.5, f"Used: {used_space:.2f} GB ({usage_percent:.1f}%)", horizontalalignment='center', verticalalignment='center', fontweight='bold')
    ax.text(0, 0.35, f"Free: {free_space:.2f} GB ({100 - usage_percent:.1f}%)", horizontalalignment='center', verticalalignment='center', fontweight='bold')
​
    # Display range in GB below the gauge
    ax.set_xticks([0, 100])
    ax.set_xticklabels([f"0 GB", f"{total_size:.2f} GB"])
​
    ax.set_ylim(0, 1)  # Keep the radius at a fixed value
    ax.set_yticklabels([])  # Remove radial tick marks
​
    # Set limits for angular axis (half-circle 180 degrees)
    ax.set_xlim(-0.5, 0.5)
​
    canvas.draw()
​
# Creating the main window
root = tk.Tk()
root.title("Server Health Check Dashboard")
​
# Server selection dropdown
server_list = ['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com'] # Replace with actual IP addresses or hostnames of the remote servers
server_var = tk.StringVar(value=server_list[0])
​
dropdown_label = tk.Label(root, text="Select Server")
dropdown_label.grid(row=0, column=0, padx=10, pady=10)
​
server_dropdown = ttk.Combobox(root, textvariable=server_var, values=server_list)
server_dropdown.grid(row=0, column=1, padx=10, pady=10)
​
# Server credentials (modify these as needed)
username = "kosv1106"  # Replace with the username for the remote server
password = "c3RM21nvPx2&%32fsp93v"  # Replace with the password for the above user
​
# Buttons to update metrics
update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
update_button.grid(row=1, column=0, columnspan=2, pady=20)
​
# Display metrics
ping_label = tk.Label(root, text="Ping: Pending", font=('Arial', 12))
ping_label.grid(row=2, column=0, columnspan=2, pady=5)
​
rdp_label = tk.Label(root, text="RDP Connection: Pending", font=('Arial', 12))
rdp_label.grid(row=3, column=0, columnspan=2, pady=5)
​
uptime_label = tk.Label(root, text="Uptime: Pending", font=('Arial', 12))
uptime_label.grid(row=4, column=0, columnspan=2, pady=5)
​
# Set up matplotlib figure for speedometers
fig, (ax_c, ax_d) = plt.subplots(1, 2, figsize=(10, 4))
​
# C: drive usage
ax_c.set_title("C: Drive")
ax_c.set_xlim(0, 100)
ax_c.set_ylim(0, 1)
​
# D: drive usage
ax_d.set_title("D: Drive")
ax_d.set_xlim(0, 100)
ax_d.set_ylim(0, 1)
​
# Canvas to embed matplotlib plot
canvas = FigureCanvasTkAgg(fig, master=root)
canvas.get_tk_widget().grid(row=5, column=0, columnspan=2)
​
# Start the Tkinter event loop
root.mainloop()
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\tkinter\__init__.py", line 1892, in __call__
    return self.func(*args)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/526142057.py", line 144, in <lambda>
    update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/526142057.py", line 77, in update_metrics
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/526142057.py", line 91, in draw_speedometer
    ax.set_theta_offset(3.14159)  # Start from the left (half-circle)
AttributeError: 'AxesSubplot' object has no attribute 'set_theta_offset'

import plotly.graph_objects
['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com']
import plotly.graph_objects as go
import tkinter as tk
from tkinter import ttk
import subprocess
import wmi
​
# Function to check the server ping
def check_ping(remote_server):
    try:
        response = subprocess.run(['ping', '-n', '1', remote_server], stdout=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error pinging server: {e}")
        return False
​
# Function to check if RDP connection is available
def check_rdp(remote_server):
    try:
        response = subprocess.run(['telnet', remote_server, '3389'], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        if response.returncode == 0:
            return True
        else:
            return False
    except Exception as e:
        print(f"Error checking RDP: {e}")
        return False
​
# Function to get disk usage and total size using WMI for a remote server
def get_disk_usage(remote_server, username, password, drive_letter):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
                return usage_percent, total_size, used_space, free_space
    except Exception as e:
        print(f"Error getting disk usage: {e}")
        return 0, 0, 0, 0
​
# Function to get server uptime in days using WMI for a remote server
def get_uptime(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for os in c.Win32_OperatingSystem():
            last_boot = os.LastBootUpTime.split()[0]  # Parse the last boot time
            boot_time = time.strptime(last_boot, '%Y-%m-%d')  # Convert to struct_time
            uptime_seconds = time.mktime(time.gmtime()) - time.mktime(boot_time)
            uptime_days = uptime_seconds // (24 * 3600)
            return uptime_days
    except Exception as e:
        print(f"Error getting uptime: {e}")
        return 0
​
# Function to update server metrics
def update_metrics(remote_server, username, password):
    # Update Ping status
    ping_status = check_ping(remote_server)
    ping_label.config(text=f"Ping: {'True' if ping_status else 'False'}", fg="green" if ping_status else "red")
    
    # Update RDP connection status
    rdp_status = check_rdp(remote_server)
    rdp_label.config(text=f"RDP Connection: {'True' if rdp_status else 'False'}", fg="green" if rdp_status else "red")
    
    # Update C: and D: drive usage
    c_drive_usage, c_total_size, c_used_space, c_free_space = get_disk_usage(remote_server, username, password, 'C:')
    d_drive_usage, d_total_size, d_used_space, d_free_space = get_disk_usage(remote_server, username, password, 'D:')
    
    # Plot C: drive speedometer
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
    
    # Plot D: drive speedometer
    draw_speedometer(d_drive_usage, d_total_size, d_used_space, d_free_space, ax_d)
    
    # Update Uptime
    uptime = get_uptime(remote_server, username, password)
    uptime_label.config(text=f"Uptime: {uptime} days")
​
# Function to draw the speedometer using Plotly
def draw_speedometer(usage_percent, total_size, used_space, free_space, ax):
    # Define color for used space based on usage
    if usage_percent > 95:
        used_color = 'red'  # Red for high usage
    else:
        used_color = 'green'  # Green for lower usage
​
    # Create a gauge chart using Plotly
    fig = go.Figure(go.Indicator(
        mode="gauge+number+delta",
        value=usage_percent,
        title={'text': f"Disk Usage ({usage_percent:.1f}%)"},
        domain={'x': [0, 1], 'y': [0, 1]},
        gauge={'axis': {'range': [None, 100]},
               'bar': {'color': used_color},
               'steps': [
                   {'range': [0, 95], 'color': 'green'},
                   {'range': [95, 100], 'color': 'red'}
               ]}
    ))
​
    # Update the layout for the plot
    fig.update_layout(
        margin={'t': 50, 'b': 50, 'l': 50, 'r': 50},
        title=f"C: Drive Usage - {used_space:.2f} GB used",
        font={'size': 14},
    )
​
    # Render the figure in the Tkinter Canvas
    fig.show()
​
# Creating the main window
root = tk.Tk()
root.title("Server Health Check Dashboard")
​
# Server selection dropdown
server_list = ['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com']  # Replace with actual IP addresses or hostnames of the remote servers
server_var = tk.StringVar(value=server_list[0])
​
dropdown_label = tk.Label(root, text="Select Server")
dropdown_label.grid(row=0, column=0, padx=10, pady=10)
​
server_dropdown = ttk.Combobox(root, textvariable=server_var, values=server_list)
server_dropdown.grid(row=0, column=1, padx=10, pady=10)
​
# Server credentials (modify these as needed)
username = "kosv1106"  # Replace with the username for the remote server
password = "c3RM21nvPx2&%32fsp93v"  # Replace with the password for the above user
​
# Buttons to update metrics
update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
update_button.grid(row=1, column=0, columnspan=2, pady=20)
​
# Display metrics
ping_label = tk.Label(root, text="Ping: Pending", font=('Arial', 12))
ping_label.grid(row=2, column=0, columnspan=2, pady=5)
​
rdp_label = tk.Label(root, text="RDP Connection: Pending", font=('Arial', 12))
rdp_label.grid(row=3, column=0, columnspan=2, pady=5)
​
uptime_label = tk.Label(root, text="Uptime: Pending", font=('Arial', 12))
uptime_label.grid(row=4, column=0, columnspan=2, pady=5)
​
# Start the Tkinter event loop
root.mainloop()
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\tkinter\__init__.py", line 1892, in __call__
    return self.func(*args)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/3786201222.py", line 135, in <lambda>
    update_button = tk.Button(root, text="Update Metrics", command=lambda: update_metrics(server_var.get(), username, password))
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/3786201222.py", line 75, in update_metrics
    draw_speedometer(c_drive_usage, c_total_size, c_used_space, c_free_space, ax_c)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/3786201222.py", line 93, in draw_speedometer
    fig = go.Figure(go.Indicator(
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\graph_objects\__init__.py", line 303, in __getattr__
    return orig_getattr(import_name)
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\importers.py", line 37, in __getattr__
    return getattr(class_module, class_name)
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\graph_objs\__init__.py", line 303, in __getattr__
    return orig_getattr(import_name)
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\importers.py", line 36, in __getattr__
    class_module = importlib.import_module(rel_module, parent_name)
  File "C:\ProgramData\Anaconda3\lib\importlib\__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
  File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 850, in exec_module
  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\graph_objs\_figure.py", line 1, in <module>
    from plotly.basedatatypes import BaseFigure
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\basedatatypes.py", line 10, in <module>
    from _plotly_utils.utils import (
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\utils.py", line 9, in <module>
    from _plotly_utils.basevalidators import (
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\basevalidators.py", line 11, in <module>
    import narwhals.stable.v1 as nw
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\__init__.py", line 7, in <module>
    from narwhals import stable
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\stable\__init__.py", line 3, in <module>
    from narwhals.stable import v1
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\stable\v1\__init__.py", line 24, in <module>
    from narwhals.functions import Then as NwThen
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\functions.py", line 30, in <module>
    from narwhals.series import Series
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\series.py", line 22, in <module>
    from narwhals.typing import IntoSeriesT
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\typing.py", line 10, in <module>
    from narwhals._compliant import CompliantDataFrame
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\_compliant\__init__.py", line 3, in <module>
    from narwhals._compliant.dataframe import CompliantDataFrame
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\_compliant\dataframe.py", line 21, in <module>
    from narwhals._translate import ArrowConvertible
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\_translate.py", line 49, in <module>
    FromNumpyDT_contra = TypeVar(
TypeError: __init__() got an unexpected keyword argument 'default'
['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com']
import tkinter as tk
from tkinter import ttk
import wmi
import subprocess
import plotly.graph_objects as go
​
# Function to get system information using WMI
def get_system_info(remote_server, username, password):
    try:
        # Initialize WMI connection
        c = wmi.WMI(remote_server, user=username, password=password)
​
        # Get system info
        system_info = c.Win32_OperatingSystem()[0]
        cpu_info = c.Win32_Processor()[0]
        ip_address = subprocess.check_output("hostname -I", shell=True).decode().strip()
​
        total_ram = float(system_info.TotalVisibleMemorySize) / 1024 / 1024  # Convert to GB
        hostname = system_info.CSName
        os_name = system_info.Caption
        cpu_cores = c.Win32_Processor()[0].NumberOfCores
​
        return hostname, ip_address, cpu_info.Name, os_name, total_ram, cpu_cores
    except Exception as e:
        print(f"Error fetching system info: {e}")
        return None, None, None, None, None, None
​
# Function to get CPU usage and RAM usage using WMI
def get_usage(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
​
        # CPU usage
        cpu_usage = c.Win32_Processor()[0].LoadPercentage
​
        # RAM usage
        total_memory = float(c.Win32_ComputerSystem()[0].TotalPhysicalMemory) / (1024 * 1024 * 1024)  # GB
        available_memory = float(c.Win32_OperatingSystem()[0].FreePhysicalMemory) / 1024  # MB
        ram_usage = 100 * (1 - (available_memory / total_memory))  # Calculate RAM usage percentage
​
        return cpu_usage, ram_usage
    except Exception as e:
        print(f"Error fetching CPU/RAM usage: {e}")
        return None, None
​
# Function to create gauge charts using Plotly
def create_gauge(title, value, color, max_value=100, unit="%"):
    return go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        title={"text": title},
        gauge={
            "axis": {"range": [0, max_value]},
            "bar": {"color": color},
            "steps": [
                {"range": [0, max_value * 0.6], "color": "lightgreen"},
                {"range": [max_value * 0.6, max_value * 0.85], "color": "yellow"},
                {"range": [max_value * 0.85, max_value], "color": "red"},
            ],
        }
    ))
​
# Function to update the dashboard UI
def update_dashboard(remote_server, username, password):
    # Fetch system information
    hostname, ip_address, cpu_info, os_name, total_ram, cpu_cores = get_system_info(remote_server, username, password)
​
    # Fetch CPU and RAM usage
    cpu_usage, ram_usage = get_usage(remote_server, username, password)
    
    # Fetch disk usage for C: drive (remote)
    c_usage, c_used, c_free, c_total = get_disk_usage(remote_server, username, password, "C:")
​
    # Clear the previous UI content
    for widget in info_frame.winfo_children():
        widget.destroy()
​
    # Display system information
    ttk.Label(info_frame, text="Hostname: " + hostname, font=("Arial", 12, "bold")).pack(anchor="w")
    ttk.Label(info_frame, text="IP Address: " + ip_address).pack(anchor="w")
    ttk.Label(info_frame, text="CPU: " + cpu_info).pack(anchor="w")
    ttk.Label(info_frame, text=f"Total RAM: {total_ram:.2f} GB").pack(anchor="w")
    ttk.Label(info_frame, text=f"CPU Cores: {cpu_cores}").pack(anchor="w")
    ttk.Label(info_frame, text=f"OS: {os_name}").pack(anchor="w")
​
    # Create Gauges for CPU, RAM, and Disk Usage
    cpu_fig = create_gauge("CPU Usage", cpu_usage, "blue")
    ram_fig = create_gauge("RAM Usage", ram_usage, "green")
    disk_fig = create_gauge("Disk Usage", c_usage if c_usage else disk_usage, "red")
​
    # Display Gauges
    cpu_fig.show()
    ram_fig.show()
    disk_fig.show()
​
# Function to get disk usage using WMI for remote server
def get_disk_usage(remote_server, username, password, drive_letter):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
                return usage_percent, used_space, free_space, total_size
    except Exception as e:
        print(f"Error fetching disk info: {e}")
        return None, None, None, None
​
# Create the Tkinter main window
root = tk.Tk()
root.title("Server Health Monitoring Dashboard")
root.geometry("800x500")
​
# Create Layout Frames
info_frame = ttk.Frame(root, padding=10)
info_frame.pack(side="left", fill="y")
​
gauge_frame = ttk.Frame(root, padding=10)
gauge_frame.pack(side="right", expand=True, fill="both")
​
# Server Dropdown List
server_list = ['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com'] # Add actual server names or IP addresses
server_var = tk.StringVar()
server_dropdown = ttk.Combobox(info_frame, textvariable=server_var, values=server_list)
server_dropdown.pack(pady=10)
server_dropdown.current(0)
​
# Update Button
update_button = ttk.Button(info_frame, text="Update Metrics", command=lambda: update_dashboard(server_var.get(), "kosv1106", "c3RM21nvPx2&%32fsp93v"))
update_button.pack(pady=10)
​
# Run the Tkinter Main Loop
root.mainloop()
Error fetching system info: Command 'hostname -I' returned non-zero exit status 1.
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\tkinter\__init__.py", line 1892, in __call__
    return self.func(*args)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/1240517597.py", line 131, in <lambda>
    update_button = ttk.Button(info_frame, text="Update Metrics", command=lambda: update_dashboard(server_var.get(), "kosv1106", "c3RM21nvPx2&%32fsp93v"))
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/1240517597.py", line 79, in update_dashboard
    ttk.Label(info_frame, text="Hostname: " + hostname, font=("Arial", 12, "bold")).pack(anchor="w")
TypeError: can only concatenate str (not "NoneType") to str
import tkinter as tk
from tkinter import ttk
import wmi
import plotly.graph_objects as go
import socket
​
# Function to get system information using WMI (for remote server)
def get_system_info(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
​
        # Get system info
        system_info = c.Win32_OperatingSystem()[0]
        cpu_info = c.Win32_Processor()[0]
        ip_address = socket.gethostbyname(remote_server)  # Getting IP of remote server using socket
        total_ram = float(system_info.TotalVisibleMemorySize) / (1024 * 1024)  # Convert KB to GB
        hostname = system_info.CSName
        os_name = system_info.Caption
        cpu_cores = cpu_info.NumberOfCores
​
        return hostname, ip_address, cpu_info.Name, os_name, total_ram, cpu_cores
    except Exception as e:
        print(f"Error fetching system info: {e}")
        return None, None, None, None, None, None
​
# Function to get CPU and RAM usage using WMI (for remote server)
def get_usage(remote_server, username, password):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
​
        # Get CPU usage
        cpu_usage = c.Win32_Processor()[0].LoadPercentage
​
        # Get RAM usage
        total_memory = float(c.Win32_ComputerSystem()[0].TotalPhysicalMemory) / (1024 * 1024 * 1024)  # GB
        available_memory = float(c.Win32_OperatingSystem()[0].FreePhysicalMemory) / 1024  # MB
        ram_usage = 100 * (1 - (available_memory / (total_memory * 1024)))  # Calculate RAM usage percentage
​
        return cpu_usage, ram_usage
    except Exception as e:
        print(f"Error fetching CPU/RAM usage: {e}")
        return None, None
​
# Function to get disk usage using WMI for remote server
def get_disk_usage(remote_server, username, password, drive_letter="C:"):
    try:
        c = wmi.WMI(remote_server, user=username, password=password)
        for disk in c.Win32_LogicalDisk(DriveType=3):  # DriveType=3 means Local Disk
            if disk.DeviceID == drive_letter:
                total_size = float(disk.Size) / (1024 * 1024 * 1024)  # Convert to GB
                free_space = float(disk.FreeSpace) / (1024 * 1024 * 1024)  # Convert to GB
                used_space = total_size - free_space
                usage_percent = (used_space / total_size) * 100
​
                return usage_percent, used_space, free_space, total_size
    except Exception as e:
        print(f"Error fetching disk info: {e}")
        return None, None, None, None
​
# Function to create gauge charts using Plotly
def create_gauge(title, value, color, max_value=100, unit="%"):
    return go.Figure(go.Indicator(
        mode="gauge+number",
        value=value,
        title={"text": title},
        gauge={
            "axis": {"range": [0, max_value]},
            "bar": {"color": color},
            "steps": [
                {"range": [0, max_value * 0.6], "color": "lightgreen"},
                {"range": [max_value * 0.6, max_value * 0.85], "color": "yellow"},
                {"range": [max_value * 0.85, max_value], "color": "red"},
            ],
        }
    ))
​
# Function to update the dashboard UI
def update_dashboard(remote_server, username, password):
    # Fetch system information
    hostname, ip_address, cpu_info, os_name, total_ram, cpu_cores = get_system_info(remote_server, username, password)
​
    # Fetch CPU and RAM usage
    cpu_usage, ram_usage = get_usage(remote_server, username, password)
    
    # Fetch disk usage for C: drive (remote)
    c_usage, c_used, c_free, c_total = get_disk_usage(remote_server, username, password, "C:")
​
    # Clear the previous UI content
    for widget in info_frame.winfo_children():
        widget.destroy()
​
    # Display system information
    ttk.Label(info_frame, text="Hostname: " + hostname, font=("Arial", 12, "bold")).pack(anchor="w")
    ttk.Label(info_frame, text="IP Address: " + ip_address).pack(anchor="w")
    ttk.Label(info_frame, text="CPU: " + cpu_info).pack(anchor="w")
    ttk.Label(info_frame, text=f"Total RAM: {total_ram:.2f} GB").pack(anchor="w")
    ttk.Label(info_frame, text=f"CPU Cores: {cpu_cores}").pack(anchor="w")
    ttk.Label(info_frame, text=f"OS: {os_name}").pack(anchor="w")
​
    # Create Gauges for CPU, RAM, and Disk Usage
    cpu_fig = create_gauge("CPU Usage", cpu_usage, "blue")
    ram_fig = create_gauge("RAM Usage", ram_usage, "green")
    disk_fig = create_gauge("Disk Usage", c_usage if c_usage else 0, "red")
​
    # Display Gauges
    cpu_fig.show()
    ram_fig.show()
    disk_fig.show()
​
# Create the Tkinter main window
root = tk.Tk()
root.title("Server Health Monitoring Dashboard")
root.geometry("800x500")
​
# Create Layout Frames
info_frame = ttk.Frame(root, padding=10)
info_frame.pack(side="left", fill="y")
​
gauge_frame = ttk.Frame(root, padding=10)
gauge_frame.pack(side="right", expand=True, fill="both")
​
# Server Dropdown List
server_list = ['uswiw1310.kohlerco.com', 'uswiw1308.kohlerco.com']  # Add actual server names or IP addresses
server_var = tk.StringVar()
server_dropdown = ttk.Combobox(info_frame, textvariable=server_var, values=server_list)
server_dropdown.pack(pady=10)
server_dropdown.current(0)
​
# Update Button
update_button = ttk.Button(info_frame, text="Update Metrics", command=lambda: update_dashboard(server_var.get(), "kosv1106", "c3RM21nvPx2&%32fsp93v"))
update_button.pack(pady=10)
​
# Run the Tkinter Main Loop
root.mainloop()
Exception in Tkinter callback
Traceback (most recent call last):
  File "C:\ProgramData\Anaconda3\lib\tkinter\__init__.py", line 1892, in __call__
    return self.func(*args)
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/4094893807.py", line 130, in <lambda>
    update_button = ttk.Button(info_frame, text="Update Metrics", command=lambda: update_dashboard(server_var.get(), "kosv1106", "c3RM21nvPx2&%32fsp93v"))
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/4094893807.py", line 101, in update_dashboard
    cpu_fig = create_gauge("CPU Usage", cpu_usage, "blue")
  File "C:\Users\KOSV1106\AppData\Local\Temp\1/ipykernel_2532/4094893807.py", line 62, in create_gauge
    return go.Figure(go.Indicator(
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\graph_objects\__init__.py", line 303, in __getattr__
    return orig_getattr(import_name)
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\importers.py", line 37, in __getattr__
    return getattr(class_module, class_name)
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\graph_objs\__init__.py", line 303, in __getattr__
    return orig_getattr(import_name)
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\importers.py", line 36, in __getattr__
    class_module = importlib.import_module(rel_module, parent_name)
  File "C:\ProgramData\Anaconda3\lib\importlib\__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
  File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 850, in exec_module
  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\graph_objs\_figure.py", line 1, in <module>
    from plotly.basedatatypes import BaseFigure
  File "C:\ProgramData\Anaconda3\Lib\site-packages\plotly\basedatatypes.py", line 10, in <module>
    from _plotly_utils.utils import (
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\utils.py", line 9, in <module>
    from _plotly_utils.basevalidators import (
  File "C:\ProgramData\Anaconda3\Lib\site-packages\_plotly_utils\basevalidators.py", line 11, in <module>
    import narwhals.stable.v1 as nw
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\__init__.py", line 7, in <module>
    from narwhals import stable
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\stable\__init__.py", line 3, in <module>
    from narwhals.stable import v1
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\stable\v1\__init__.py", line 24, in <module>
    from narwhals.functions import Then as NwThen
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\functions.py", line 30, in <module>
    from narwhals.series import Series
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\series.py", line 22, in <module>
    from narwhals.typing import IntoSeriesT
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\typing.py", line 10, in <module>
    from narwhals._compliant import CompliantDataFrame
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\_compliant\__init__.py", line 3, in <module>
    from narwhals._compliant.dataframe import CompliantDataFrame
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\_compliant\dataframe.py", line 21, in <module>
    from narwhals._translate import ArrowConvertible
  File "C:\ProgramData\Anaconda3\Lib\site-packages\narwhals\_translate.py", line 49, in <module>
    FromNumpyDT_contra = TypeVar(
TypeError: __init__() got an unexpected keyword argument 'default'
