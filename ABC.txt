import tkinter as tk
from tkinter import ttk
import psutil
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
import numpy as np

class SystemMonitorApp:
    def __init__(self, root):
        self.root = root
        self.root.title("System Health Dashboard")
        self.root.geometry("900x600")
        self.root.configure(bg="#222831")  # Dark background color

        # Title
        ttk.Label(root, text="System Health Dashboard", font=("Helvetica", 20, "bold"), 
                  foreground="white", background="#222831").pack(pady=15)

        # Create a frame for the gauges
        self.gauge_frame = tk.Frame(root, bg="#222831")
        self.gauge_frame.pack()

        # Create Matplotlib figures for four gauges (CPU, RAM, Disk C, Disk D)
        self.fig, self.axs = plt.subplots(2, 2, figsize=(8, 5))
        self.fig.patch.set_facecolor("#222831")  # Set background to match UI
        self.canvas = FigureCanvasTkAgg(self.fig, master=self.gauge_frame)
        self.canvas.get_tk_widget().pack()

        self.update_data()

    def update_data(self):
        """Fetch system stats and update the UI every second."""
        cpu_usage = psutil.cpu_percent(interval=1)
        mem_usage = psutil.virtual_memory().percent
        disk_c_usage = psutil.disk_usage('C:\\').percent
        disk_d_usage = psutil.disk_usage('D:\\').percent if len(psutil.disk_partitions()) > 1 else 0

        # Update all gauges
        self.update_gauge(self.axs[0, 0], cpu_usage, "CPU Usage", "#00ADB5")
        self.update_gauge(self.axs[0, 1], mem_usage, "Memory Usage", "#F8B400")
        self.update_gauge(self.axs[1, 0], disk_c_usage, "Disk C: Usage", "#FF5722")
        self.update_gauge(self.axs[1, 1], disk_d_usage, "Disk D: Usage", "#AA00FF")

        # Schedule next update
        self.root.after(1000, self.update_data)

    def update_gauge(self, ax, usage, label, color):
        """Update the semi-speedometer gauge for CPU, RAM, or Disk."""
        ax.clear()
        ax.set_xlim(-1, 1)
        ax.set_ylim(-0.1, 1.2)

        # Change color based on usage level
        if usage > 95:
            color = "#D72323"  # Red
        elif usage > 80:
            color = "#F8B400"  # Yellow
        else:
            color = color  # Default color

        # Draw gauge arc
        theta = np.linspace(0, np.pi, 100)
        x = np.cos(theta)
        y = np.sin(theta)
        ax.plot(x, y, color="white", lw=3)  # Outline

        # Fill based on usage
        theta_fill = np.linspace(0, np.pi * (usage / 100), 50)
        x_fill = np.cos(theta_fill)
        y_fill = np.sin(theta_fill)
        ax.fill_betweenx(y_fill, 0, x_fill, color=color, alpha=0.8)

        # Hide axes
        ax.set_xticks([])
        ax.set_yticks([])
        ax.set_frame_on(False)

        # Draw usage percentage
        ax.text(0, -0.2, f"{usage:.1f}%", ha="center", va="center", 
                fontsize=16, fontweight="bold", color="white")
        ax.set_title(label, fontsize=12, color="white", pad=10)

        self.canvas.draw()

# Run Application
root = tk.Tk()
app = SystemMonitorApp(root)
root.mainloop()
