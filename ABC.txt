import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import ttk

# Sample hierarchical data with system details (as provided)
data = {
    'USWIW1489': {'status': 'online', 'type': 'Windows', 'ping': True, 'rdp/ssh': True, 'cpu_usage': 66.5, 'ram_usage': 66.5, 'ram_detailed': {'total': 32.0, 'used': 21.28}, 'C_drive': 55.8, 'C_detailed': {'total': 99.4, 'used': 55.5}, 'D_drive': 29.1, 'D_detailed': {'total': 200.0, 'used': 58.18}, 'uptime': 14},
    'USWIW1490': {'status': 'online', 'type': 'Windows', 'ping': True, 'rdp/ssh': True, 'cpu_usage': 66.5, 'ram_usage': 67.9, 'ram_detailed': {'total': 32.0, 'used': 21.72}, 'C_drive': 50.1, 'C_detailed': {'total': 99.4, 'used': 49.76}, 'D_drive': 90.6, 'D_detailed': {'total': 199.98, 'used': 195.18}, 'uptime': 12}
}

# Function to determine the color based on value thresholds
def get_color(value, threshold1=95, threshold2=85):
    """Returns a color based on value."""
    if value >= threshold1:
        return "#ff0000"  # Red (danger)
    elif value >= threshold2:
        return "#ffff00"  # Yellow (warning)
    else:
        return "#00ff00"  # Green (success)

# Create the ttkbootstrap window
app = tb.Window(themename="flatly")  # Use a flat theme

# Create Treeview widget using ttkbootstrap's tb.Treeview
tree = tb.Treeview(app, bootstyle="primary", columns=("Status", "Type", "Ping", "RDP/SSH", "CPU Usage", "RAM Usage", "C Drive", "D Drive", "Uptime"))

# Define columns
tree.column("#0", width=200, anchor="w")  # Tree column (for devices)
tree.column("Status", width=100, anchor="center")
tree.column("Type", width=100, anchor="center")
tree.column("Ping", width=100, anchor="center")
tree.column("RDP/SSH", width=100, anchor="center")
tree.column("CPU Usage", width=120, anchor="center")
tree.column("RAM Usage", width=120, anchor="center")
tree.column("C Drive", width=120, anchor="center")
tree.column("D Drive", width=120, anchor="center")
tree.column("Uptime", width=120, anchor="center")

# Define headings
tree.heading("#0", text="Device", anchor="w")
tree.heading("Status", text="Status", anchor="center")
tree.heading("Type", text="Type", anchor="center")
tree.heading("Ping", text="Ping", anchor="center")
tree.heading("RDP/SSH", text="RDP/SSH", anchor="center")
tree.heading("CPU Usage", text="CPU Usage (%)", anchor="center")
tree.heading("RAM Usage", text="RAM Usage (%)", anchor="center")
tree.heading("C Drive", text="C Drive (%)", anchor="center")
tree.heading("D Drive", text="D Drive (%)", anchor="center")
tree.heading("Uptime", text="Uptime (days)", anchor="center")

# Insert data
for device, stats in data.items():
    ram_color = get_color(stats['ram_usage'])
    c_drive_color = get_color(stats['C_drive'])
    d_drive_color = get_color(stats['D_drive'])

    # Main device node
    parent = tree.insert("", "end", text=device, values=(stats['status'], stats['type'], stats['ping'], stats['rdp/ssh'], stats['cpu_usage'], f"{stats['ram_usage']}%", f"{stats['C_drive']}%", f"{stats['D_drive']}%", f"{stats['uptime']} Days"))

    # Insert RAM detailed info under each device
    ram_details = stats['ram_detailed']
    ram_item = tree.insert(parent, "end", text="RAM", values=(f"Total: {ram_details['total']} GB", f"Used: {ram_details['used']} GB", "", "", ""))
    
    # Apply color tag to specific columns (e.g., RAM Usage)
    tree.tag_configure(f"ram_{device}", background=ram_color)
    tree.item(ram_item, tags=(f"ram_{device}",))

    # Insert C drive detailed info under each device
    c_details = stats['C_detailed']
    c_item = tree.insert(parent, "end", text="C Drive", values=(f"Total: {c_details['total']} GB", f"Used: {c_details['used']} GB", "", "", ""))
    
    # Apply color tag to specific columns (e.g., C Drive Usage)
    tree.tag_configure(f"c_drive_{device}", background=c_drive_color)
    tree.item(c_item, tags=(f"c_drive_{device}",))

    # Insert D drive detailed info under each device
    d_details = stats['D_detailed']
    d_item = tree.insert(parent, "end", text="D Drive", values=(f"Total: {d_details['total']} GB", f"Used: {d_details['used']} GB", "", "", ""))
    
    # Apply color tag to specific columns (e.g., D Drive Usage)
    tree.tag_configure(f"d_drive_{device}", background=d_drive_color)
    tree.item(d_item, tags=(f"d_drive_{device}",))

# Pack the treeview widget into the window
tree.pack(fill="both", expand=True)

# Run the ttkbootstrap event loop
app.mainloop()
