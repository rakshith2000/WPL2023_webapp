def export_to_excel(self):
    """Export the collected metrics to an Excel file with file dialog for path selection"""
    if not self.windows_details and not self.linux_details:
        return
        
    try:
        import openpyxl
        from openpyxl.styles import Font, Alignment
        from openpyxl.utils import get_column_letter
    except ImportError:
        ttkb.dialogs.Messagebox.show_error(
            title="Export Failed",
            message="The openpyxl library is required for Excel export. Please install it with:\n\npip install openpyxl",
            parent=self
        )
        return
    
    # Create a file dialog to get the save path
    file_path = filedialog.asksaveasfilename(
        title="Save Metrics as Excel",
        initialfile=f"JDA_HC_Data_{datetime.now().strftime('%Y-%m-%d_%H-%M')}.xlsx",
        filetypes=[('Excel Files', '*.xlsx')],
        parent=self
    )   
    
    # If user canceled the dialog
    if not file_path:
        return
        
    # Ensure the file has .xlsx extension
    if not file_path.lower().endswith('.xlsx'):
        file_path += '.xlsx'
    
    try:
        # Create a new workbook
        wb = openpyxl.Workbook()
        
        # Define colors and styles
        red_font = Font(color='FF0000', bold=True)
        orange_font = Font(color='FFA500', bold=True)
        green_font = Font(color='00AA00', bold=True)
        header_font = Font(color='FFFFFF', bold=True)
        header_fill = PatternFill(start_color='2c3e50', end_color='2c3e50', fill_type='solid')
        top_alignment = Alignment(vertical='top', wrap_text=True)
        
        # ========== Windows Sheet ==========
        ws_windows = wb.active
        ws_windows.title = "Windows Servers"
        
        # Windows headers
        windows_headers = [
            'Server', 'Status', 'Type', 'Ping', 'RDP/SSH', 
            'CPU Usage (%)', 'RAM Usage (%)', 'RAM Total (GB)', 'RAM Used (GB)',
            'C Drive Usage (%)', 'C Drive Total (GB)', 'C Drive Used (GB)',
            'D Drive Usage (%)', 'D Drive Total (GB)', 'D Drive Used (GB)',
            'Uptime', 'MOCA Service', 'REFS Service', 'BlueYonder Service'
        ]
        
        # Write Windows headers
        for col_num, header in enumerate(windows_headers, 1):
            cell = ws_windows.cell(row=1, column=col_num, value=header)
            cell.fill = header_fill
            cell.font = header_font
        
        # Write Windows data
        for row_num, (server, metrics) in enumerate(self.windows_details.items(), 2):
            ws_windows.cell(row=row_num, column=1, value=server)
            ws_windows.cell(row=row_num, column=2, value=metrics['status'])
            ws_windows.cell(row=row_num, column=3, value='Windows')
            
            # Ping and RDP
            ping_cell = ws_windows.cell(row=row_num, column=4, value="✔" if metrics['ping'] else "✖")
            ping_cell.font = Font(color='00AA00' if metrics['ping'] else 'FF0000', bold=True)
            
            rdp_cell = ws_windows.cell(row=row_num, column=5, value="✔" if metrics['rdp/ssh'] else "✖")
            rdp_cell.font = Font(color='00AA00' if metrics['rdp/ssh'] else 'FF0000', bold=True)
            
            # CPU Usage
            cpu_cell = ws_windows.cell(row=row_num, column=6, value=metrics['cpu_usage'])
            if metrics['cpu_usage'] >= 95:
                cpu_cell.font = red_font
            elif metrics['cpu_usage'] >= 85:
                cpu_cell.font = orange_font
            else:
                cpu_cell.font = green_font
                
            # RAM Usage
            ram_cell = ws_windows.cell(row=row_num, column=7, value=metrics['ram_usage'])
            if metrics['ram_usage'] >= 95:
                ram_cell.font = red_font
            elif metrics['ram_usage'] >= 85:
                ram_cell.font = orange_font
            else:
                ram_cell.font = green_font
                
            ws_windows.cell(row=row_num, column=8, value=metrics['ram_detailed']['total'])
            ws_windows.cell(row=row_num, column=9, value=metrics['ram_detailed']['used'])
            
            # C Drive
            c_drive_cell = ws_windows.cell(row=row_num, column=10, value=metrics['C_drive'])
            if metrics['C_drive'] >= 95:
                c_drive_cell.font = red_font
            elif metrics['C_drive'] >= 85:
                c_drive_cell.font = orange_font
            else:
                c_drive_cell.font = green_font
                
            ws_windows.cell(row=row_num, column=11, value=metrics['C_detailed']['total'])
            ws_windows.cell(row=row_num, column=12, value=metrics['C_detailed']['used'])
            
            # D Drive
            d_drive_cell = ws_windows.cell(row=row_num, column=13, value=metrics['D_drive'])
            if metrics['D_drive'] >= 95:
                d_drive_cell.font = red_font
            elif metrics['D_drive'] >= 85:
                d_drive_cell.font = orange_font
            else:
                d_drive_cell.font = green_font
                
            ws_windows.cell(row=row_num, column=14, value=metrics['D_detailed']['total'])
            ws_windows.cell(row=row_num, column=15, value=metrics['D_detailed']['used'])
            
            ws_windows.cell(row=row_num, column=16, value=metrics['uptime'])
            ws_windows.cell(row=row_num, column=17, value=metrics['moca_serv'])
            ws_windows.cell(row=row_num, column=18, value=metrics['refs_serv'])
            ws_windows.cell(row=row_num, column=19, value=metrics['blueyonder_serv'])
        
        # ========== Linux Sheet ==========
        ws_linux = wb.create_sheet("Linux Servers")
        
        # Linux headers
        linux_headers = [
            'Server', 'Status', 'Type', 'Ping', 'SSH', 
            'CPU Usage (%)', 'RAM Usage (%)', 'Swap Usage (%)', 'FS Usage (>90%)',
            'RAM Total (GB)', 'RAM Used (GB)', 'C Drive Usage (%)', 
            'C Drive Total (GB)', 'C Drive Used (GB)', 'ClusterIP Ping',
            'Uptime', 'DB Status', 'Listener Status', 'Archive Logs',
            'Daily Backup', 'Weekly Backup', 'Checkdown Status'
        ]
        
        # Write Linux headers
        for col_num, header in enumerate(linux_headers, 1):
            cell = ws_linux.cell(row=1, column=col_num, value=header)
            cell.fill = header_fill
            cell.font = header_font
        
        # Write Linux data
        for row_num, (server, metrics) in enumerate(self.linux_details.items(), 2):
            ws_linux.cell(row=row_num, column=1, value=server)
            ws_linux.cell(row=row_num, column=2, value=metrics['status'])
            ws_linux.cell(row=row_num, column=3, value='Linux')
            
            # Ping and SSH
            ping_cell = ws_linux.cell(row=row_num, column=4, value="✔" if metrics['ping'] else "✖")
            ping_cell.font = Font(color='00AA00' if metrics['ping'] else 'FF0000', bold=True)
            
            ssh_cell = ws_linux.cell(row=row_num, column=5, value="✔" if metrics['rdp/ssh'] else "✖")
            ssh_cell.font = Font(color='00AA00' if metrics['rdp/ssh'] else 'FF0000', bold=True)
            
            # CPU Usage
            cpu_cell = ws_linux.cell(row=row_num, column=6, value=metrics['cpu_usage'])
            if metrics['cpu_usage'] >= 95:
                cpu_cell.font = red_font
            elif metrics['cpu_usage'] >= 85:
                cpu_cell.font = orange_font
            else:
                cpu_cell.font = green_font
                
            # RAM Usage
            ram_cell = ws_linux.cell(row=row_num, column=7, value=metrics['ram_usage'])
            if metrics['ram_usage'] >= 95:
                ram_cell.font = red_font
            elif metrics['ram_usage'] >= 85:
                ram_cell.font = orange_font
            else:
                ram_cell.font = green_font
                
            # Swap Usage
            swap_cell = ws_linux.cell(row=row_num, column=8, value=metrics['swap_usage'])
            if metrics['swap_usage'] >= 95:
                swap_cell.font = red_font
            elif metrics['swap_usage'] >= 85:
                swap_cell.font = orange_font
            else:
                swap_cell.font = green_font
                
            # FS Usage (multi-line)
            if isinstance(metrics['fs_usage'], dict):
                fs_text = "\n".join([f"{fs}: {usage}%" for fs, usage in metrics['fs_usage'].items()])
            else:
                fs_text = str(metrics['fs_usage'])
            fs_cell = ws_linux.cell(row=row_num, column=9, value=fs_text)
            fs_cell.alignment = top_alignment
                
            # RAM details
            ws_linux.cell(row=row_num, column=10, value=metrics['ram_detailed']['total'])
            ws_linux.cell(row=row_num, column=11, value=metrics['ram_detailed']['used'])
            
            # C Drive
            c_drive_cell = ws_linux.cell(row=row_num, column=12, value=metrics['C_drive'])
            if metrics['C_drive'] >= 95:
                c_drive_cell.font = red_font
            elif metrics['C_drive'] >= 85:
                c_drive_cell.font = orange_font
            else:
                c_drive_cell.font = green_font
                
            ws_linux.cell(row=row_num, column=13, value=metrics['C_detailed']['total'])
            ws_linux.cell(row=row_num, column=14, value=metrics['C_detailed']['used'])
            
            # Cluster IP Ping
            cluster_cell = ws_linux.cell(row=row_num, column=15, value="✔" if metrics['cluster_ping'] else "✖")
            cluster_cell.font = Font(color='00AA00' if metrics['cluster_ping'] else 'FF0000', bold=True)
            
            ws_linux.cell(row=row_num, column=16, value=f"{metrics['uptime']} Days")
            
            # DB Status (multi-line)
            if isinstance(metrics['pmon_stat'], list):
                db_text = "\n".join(metrics['pmon_stat'])
            else:
                db_text = str(metrics['pmon_stat'])
            db_cell = ws_linux.cell(row=row_num, column=17, value=db_text)
            db_cell.alignment = top_alignment
            
            # Listener Status (multi-line)
            if isinstance(metrics['tns_stat'], list):
                listener_text = "\n".join(metrics['tns_stat'])
            else:
                listener_text = str(metrics['tns_stat'])
            listener_cell = ws_linux.cell(row=row_num, column=18, value=listener_text)
            listener_cell.alignment = top_alignment
            
            # Archive Logs (multi-line)
            if isinstance(metrics['archive_log'], list):
                archive_text = "\n".join(metrics['archive_log'])
            else:
                archive_text = str(metrics['archive_log'])
            archive_cell = ws_linux.cell(row=row_num, column=19, value=archive_text)
            archive_cell.alignment = top_alignment
            
            # Daily Backup (multi-line)
            if isinstance(metrics['daily_backup'], list):
                daily_text = "\n".join(metrics['daily_backup'])
            else:
                daily_text = str(metrics['daily_backup'])
            daily_cell = ws_linux.cell(row=row_num, column=20, value=daily_text)
            daily_cell.alignment = top_alignment
            
            # Weekly Backup (multi-line)
            if isinstance(metrics['weekly_backup'], list):
                weekly_text = "\n".join(metrics['weekly_backup'])
            else:
                weekly_text = str(metrics['weekly_backup'])
            weekly_cell = ws_linux.cell(row=row_num, column=21, value=weekly_text)
            weekly_cell.alignment = top_alignment
            
            # Checkdown Status (multi-line)
            if isinstance(metrics['checkdown'], list):
                checkdown_text = "\n".join(metrics['checkdown'])
            else:
                checkdown_text = str(metrics['checkdown'])
            checkdown_cell = ws_linux.cell(row=row_num, column=22, value=checkdown_text)
            checkdown_cell.alignment = top_alignment
        
        # Auto-adjust column widths for both sheets
        for ws in [ws_windows, ws_linux]:
            for column in ws.columns:
                max_length = 0
                column_letter = get_column_letter(column[0].column)
                
                # Find the max length in the column
                for cell in column:
                    try:
                        if cell.value:
                            # For multi-line cells, check each line
                            lines = str(cell.value).split('\n')
                            for line in lines:
                                if len(line) > max_length:
                                    max_length = len(line)
                    except:
                        pass
                
                # Set column width with some padding
                adjusted_width = (max_length + 2) * 1.2
                ws.column_dimensions[column_letter].width = adjusted_width
        
        # Save the workbook
        wb.save(file_path)
        
        # Show success message
        ttkb.dialogs.Messagebox.show_info(
            title="Export Successful",
            message=f"Metrics exported successfully to:\n{file_path}",
            parent=self
        )
    except Exception as e:
        ttkb.dialogs.Messagebox.show_error(
            title="Export Failed",
            message=f"Failed to export metrics:\n{str(e)}",
            parent=self
        )
