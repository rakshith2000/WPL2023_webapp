def create_canvas_table_linux(self):
        """Create a canvas-based table to display server metrics"""
        # Create container frame
        container_frame = ttkb.Frame(self.content_frame)
        container_frame.pack(fill="both", expand=True, padx=10, pady=10)
        
        # Create scrollable canvas
        self.table_canvas_linux = Canvas(container_frame, bg="white", highlightthickness=0)
        self.table_canvas_linux.pack(fill="both", expand=True)
        
        # Initialize font
        self.table_font = tkfont.Font(family="Calibri", size=10)
        
        self.table_canvas_linux.bind("<Configure>", lambda e: self.draw_table())
            
    def get_column_widths_linux(self, headers, data, available_width):
        """Calculate column widths based on content"""
        max_text_widths = []
        for col_index in range(len(headers)):
            column_texts = [headers[col_index]] + [str(row[col_index]) for row in data]
            max_width = max(self.table_font.measure(text) for text in column_texts) + self.padding
            max_text_widths.append(max_width)

        total_content_width = sum(max_text_widths)
        
        if total_content_width < available_width:
            # Distribute extra width proportionally
            extra = available_width - total_content_width
            max_text_widths = [w + (extra * w / total_content_width) for w in max_text_widths]
            
        return max_text_widths
    
    def draw_table(self):
        """Draw the table with server metrics"""
        if not self.windows_details:
            return
            
        # Prepare headers and data
        headers = [
            "Server", "Type", "Ping", "SSH", 
            "CPU Usage", "RAM Usage", "Swap Usage", "Faulted Resources", "FS Usage (>90%)", "Uptime"
        ]
        
        # Combine Windows and Linux data
        data = []
        for server, metrics in self.linux_details.items():
            row = [
                server,
                #metrics['status'],
                self.server_credentials[server]['type'],
                "✔" if metrics['ping'] else "✖",
                "✔" if metrics['rdp/ssh'] else "✖",
                f"{metrics['cpu_usage']}%" if metrics['status'] == 'Online' else "N/A",
                f"{metrics['ram_usage']}%" if metrics['status'] == 'Online' else "N/A",
                f"{metrics['swap_usage']}%" if metrics['status'] == 'Online' else "N/A",
                f"{metrics['faulted_resources']}" if metrics['status'] == 'Online' else "N/A",
                f"{metrics['fs_usage']}" if metrics['status'] == 'Online' else "N/A",
                f"{metrics['uptime']} Days" if metrics['status'] == 'Online' else "N/A"
            ]
            data.append(row)
        
        # Clear existing items
        self.table_canvas_linux.delete("all")
        
        # Get current canvas width
        canvas_width = self.table_canvas_linux.winfo_width()
        if canvas_width < 100:  # Minimum width
            canvas_width = 1000
            
        # Calculate column widths
        col_widths = self.get_column_widths_linux(headers, data, canvas_width)
        
        # Calculate total height needed
        total_height = ((len(data) + 1) * self.cell_height) + 5
        
        # Configure canvas scroll region
        self.table_canvas_linux.config(height=total_height)
        
        # Draw headers
        x = 0
        for i, header in enumerate(headers):
            w = col_widths[i]
            self.table_canvas_linux.create_rectangle(
                x, 0, x + w, self.cell_height, 
                fill=self.header_bg, outline="gray"
            )
            self.table_canvas_linux.create_text(
                x + w // 2, self.cell_height // 2, 
                text=header, fill=self.header_fg, 
                font=("Calibri", 10, "bold")
            )
            x += w
        
        # Draw rows
        for r, row in enumerate(data):
            y0 = (r + 1) * self.cell_height
            y1 = y0 + self.cell_height
            bg_color = self.alt_bg if r % 2 == 0 else "white"
            x = 0
            
            for c, cell in enumerate(row):
                w = col_widths[c]
                self.table_canvas_linux.create_rectangle(
                    x, y0, x + w, y1, 
                    fill=bg_color, outline="gray"
                )
                
                # Determine text color based on metric
                if c >= 4 and c <= 6 and "%" in str(cell):  # Metric columns
                    try:
                        value = float(str(cell).replace("%", ""))
                        color = self.get_metric_color(value)
                    except ValueError:
                        color = "black"
                elif c == 2 or c == 3:  # Ping/RDP columns
                    color = "#4caf50" if cell == "✔" else "#f44336" 
                else:
                    color = "black"
                
                self.table_canvas_linux.create_text(
                    x + w // 2, (y0 + y1) // 2, 
                    text=cell, fill=color, 
                    font=("Calibri", 10)
                )
                x += w
