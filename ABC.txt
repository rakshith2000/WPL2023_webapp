    def export_to_csv(self):
        """Export the collected metrics to a CSV file with file dialog for path selection"""
        if not self.server_details:
            return
            
        # Create a file dialog to get the save path
        file_path = ttkb.dialogs.dialogs.SaveFileDialog(
            title="Save Metrics as CSV",
            initialfile=f"server_metrics_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            filetypes=[('CSV Files', '*.csv')],
            parent=self
        ).show()
        
        # If user canceled the dialog
        if not file_path:
            return
            
        # Ensure the file has .csv extension
        if not file_path.lower().endswith('.csv'):
            file_path += '.csv'
        
        try:
            with open(file_path, 'w', newline='') as csvfile:
                fieldnames = [
                    'Server', 'Status', 'Type', 'Ping', 'RDP/SSH', 
                    'CPU Usage (%)', 'RAM Usage (%)', 'RAM Total (GB)', 'RAM Used (GB)',
                    'C Drive Usage (%)', 'C Drive Total (GB)', 'C Drive Used (GB)',
                    'D Drive Usage (%)', 'D Drive Total (GB)', 'D Drive Used (GB)',
                    'Uptime (days)'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for server, metrics in self.server_details.items():
                    writer.writerow({
                        'Server': server,
                        'Status': metrics['status'],
                        'Type': self.server_credentials[server]['type'],
                        'Ping': metrics['ping'],
                        'RDP/SSH': metrics['rdp/ssh'],
                        'CPU Usage (%)': metrics['cpu_usage'],
                        'RAM Usage (%)': metrics['ram_usage'],
                        'RAM Total (GB)': metrics['ram_detailed']['total'],
                        'RAM Used (GB)': metrics['ram_detailed']['used'],
                        'C Drive Usage (%)': metrics['C_drive'],
                        'C Drive Total (GB)': metrics['C_detailed']['total'],
                        'C Drive Used (GB)': metrics['C_detailed']['used'],
                        'D Drive Usage (%)': metrics['D_drive'],
                        'D Drive Total (GB)': metrics['D_detailed']['total'],
                        'D Drive Used (GB)': metrics['D_detailed']['used'],
                        'Uptime (days)': metrics['uptime']
                    })
            
            # Show success message
            ttkb.dialogs.Messagebox.show_info(
                title="Export Successful",
                message=f"Metrics exported successfully to:\n{file_path}",
                parent=self
            )
        except Exception as e:
            ttkb.dialogs.Messagebox.show_error(
                title="Export Failed",
                message=f"Failed to export metrics:\n{str(e)}",
                parent=self
            )


self.export_btn = ttkb.Button(
            left_pane,
            text="Export to CSV",
            bootstyle="info",
            style='Export.TButton',
            command=self.export_to_csv,
            state="disabled"  # Initially disabled
        )
        self.export_btn.pack(fill="x", pady=(0, 20))

    def update_gui_after_metrics(self):
        self.display_metrics()
        self.export_btn.config(state="normal")  # Enable export button now that we have data
