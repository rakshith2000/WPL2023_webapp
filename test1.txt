from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from bs4 import BeautifulSoup
from sqlalchemy import create_engine, update, MetaData, Table
import time

# Mapping full names to short names
teams = {
    'Chennai Super Kings': 'CSK',
    'Delhi Capitals': 'DC',
    'Gujarat Titans': 'GT',
    'Kolkata Knight Riders': 'KKR',
    'Lucknow Super Giants': 'LSG',
    'Mumbai Indians': 'MI',
    'Punjab Kings': 'PBKS',
    'Rajasthan Royals': 'RR',
    'Royal Challengers Bengaluru': 'RCB',
    'Sunrisers Hyderabad': 'SRH'
}

# --- Configure PostgreSQL DB ---
DB_USER = "yourusername"
DB_PASS = "yourpassword"
DB_HOST = "127.0.0.1"
DB_PORT = "5432"
DB_NAME = "yourdbname"

engine = create_engine(f"postgresql+psycopg2://{DB_USER}:{DB_PASS}@{DB_HOST}:{DB_PORT}/{DB_NAME}")
conn = engine.connect()
metadata = MetaData(bind=engine)
points_table = Table('pointstable', metadata, autoload_with=engine)

# --- Set up Selenium ---
options = Options()
options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--remote-debugging-port=9222")
options.add_argument("--single-process")

driver = None

try:
    print("Launching headless Chrome...")
    driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    driver.get("https://www.ipltop4.com/")
    time.sleep(3)

    soup = BeautifulSoup(driver.page_source, 'html.parser')
    table = soup.find('table', class_='w-full min-w-full table-sticky-columns table-hover')

    if not table:
        raise Exception("Points table not found on the page.")

    print("Scraping data...")
    for row in table.find_all('tr')[1:]:
        cells = row.find_all('td')
        team_name = cells[1].text.strip()
        qual_pct = cells[8].text.strip()

        short_name = teams.get(team_name)
        if not short_name:
            print(f"Unknown team: {team_name}, skipping.")
            continue

        stmt = (
            update(points_table)
            .where(points_table.c.team_name == short_name)
            .values(qual=qual_pct)
        )
        conn.execute(stmt)
        print(f"Updated {short_name} -> {qual_pct}")

    conn.commit()

except Exception as e:
    print("Error:", e)

finally:
    if driver:
        driver.quit()
    conn.close()
    print("Finished.")
