class SystemHealthCheckDashboard(ttkb.Frame):
    def __init__(self, master):
        super().__init__(master)
        self.pack(fill="both", expand=True)
        
        # Add refresh timer variable
        self.refresh_timer = None
        self.refresh_interval = 300000  # 5 minutes in milliseconds
        
        # ... rest of existing __init__ code ...
        
    def update_gui_after_metrics(self):
        self.display_metrics()
        self.export_btn.config(state="normal")
        self.update_timestamp()
        
        # Schedule next refresh
        if self.refresh_timer:
            self.after_cancel(self.refresh_timer)
        self.refresh_timer = self.after(self.refresh_interval, self.start_metrics_collection_thread)
        
    def auto_refresh(self):
        """Start the metrics collection and schedule next refresh"""
        self.start_metrics_collection_thread()
        
    def on_close(self):
        """Cancel any pending refresh when window is closing"""
        if self.refresh_timer:
            self.after_cancel(self.refresh_timer)
        self.master.destroy()

if __name__ == '__main__':
    app = ttkb.Window("Health Check Dashboard", "flatly")
    app.state('zoomed')
    dashboard = SystemHealthCheckDashboard(app)
    
    # Set up close handler
    app.protocol("WM_DELETE_WINDOW", dashboard.on_close)
    
    # Start initial refresh
    dashboard.auto_refresh()
    
    app.mainloop()
